<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://genicsblog.com/rss.xml" rel="self" type="application/atom+xml"/><link href="https://genicsblog.com/" rel="alternate" type="text/html"/><updated>2022-04-17T17:30:21+00:00</updated><id>https://genicsblog.com/rss.xml</id><title type="html">Genics Blog</title><subtitle>An open source developer publication aimed at sharing well explained tutorials on various topics for the developer community.</subtitle><entry><title type="html">How to use Mongoose with Next.js for MongoDB?</title><link href="https://genicsblog.com/usman/how-to-use-mongoose-with-next-js-for-mongodb" rel="alternate" type="text/html" title="How to use Mongoose with Next.js for MongoDB?"/><published>2022-04-17T00:00:00+00:00</published><updated>2022-04-17T00:00:00+00:00</updated><id>https://genicsblog.com/usman/how-to-use-mongoose-with-nextjs-for-mongodb</id><content type="html" xml:base="https://genicsblog.com/usman/how-to-use-mongoose-with-next-js-for-mongodb"><![CDATA[<h1 id="hey-all-">Hey all! 👋</h1> <p>Next.js is an amazing full-stack framework and MongoDB is a great NoSQL database. Using them together will make an app super fast and awesome! In this post, we’ll go ahead and set up the Mongoose ODM inside our Next.js app to make use of MongoDB!</p> <p>So let’s see how you can set up Mongoose in a Next.js app to connect and interact with your MongoDB database!</p> <h2 id="setting-up-mongoose-and-the-connection-string">Setting up mongoose and the connection string</h2> <p>In your Next.js project, to set up mongoose you simply have to install it as a dependency just as you do with Node.js.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm i mongoose
</code></pre></div></div> <p>After installing <code class="language-plaintext highlighter-rouge">mongoose</code>, we’ll create a folder called <code class="language-plaintext highlighter-rouge">utils</code> in our root and create a new file named <code class="language-plaintext highlighter-rouge">connectMongo.js</code> file.</p> <p>In this file, we will export a function that connects us to MongoDB.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1650178314792/H0ZTJa7ma.png" alt="image.png"/></p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">mongoose</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">mongoose</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">connectMongo</span> <span class="o">=</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nx">connect</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">MONGO_URI</span><span class="p">);</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">connectMongo</span><span class="p">;</span>
</code></pre></div></div> <p>Also create a file named <code class="language-plaintext highlighter-rouge">.env.local</code> in the root of your project to store the connection URI in your environment variable and hide it from the main code.</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># I am using MongoDB locally but you can use MongoDB Atlas also if you want
</span><span class="n">MONGO_URI</span><span class="o">=</span><span class="s">"mongodb://localhost:27017/mongoose_nextjs_demo"</span>
</code></pre></div></div> <h2 id="create-a-basic-mongoose-model">Create a basic mongoose model</h2> <p>Now that <code class="language-plaintext highlighter-rouge">mongoose</code> is set up successfully in our Next.js project, the rest of the work is quite similar to a Node.js app. I personally like to create a folder called <code class="language-plaintext highlighter-rouge">models</code> in the root of my project and create my model files there, just like a normal node.js app.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1650178623079/FI6HSWVCK.png" alt="image.png"/></p> <p>So now we’ll create a file named <code class="language-plaintext highlighter-rouge">testModel.js</code> in our <code class="language-plaintext highlighter-rouge">models</code> folder where we’ll create our mongoose model.</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Schema</span><span class="p">,</span> <span class="nx">model</span><span class="p">,</span> <span class="nx">models</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">mongoose</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">testSchema</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Schema</span><span class="p">({</span>
  <span class="na">name</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span>
  <span class="na">email</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">type</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span>
    <span class="na">required</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="na">unique</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="p">},</span>
<span class="p">});</span>

<span class="kd">const</span> <span class="nx">Test</span> <span class="o">=</span> <span class="nx">models</span><span class="p">.</span><span class="nx">Test</span> <span class="o">||</span> <span class="nx">model</span><span class="p">(</span><span class="dl">'</span><span class="s1">Test</span><span class="dl">'</span><span class="p">,</span> <span class="nx">testSchema</span><span class="p">);</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">Test</span><span class="p">;</span>
</code></pre></div></div> <blockquote> <p>IMPORTANT: Notice how we use <code class="language-plaintext highlighter-rouge">models.Test</code> and then the logical OR operator and then use the <code class="language-plaintext highlighter-rouge">model</code> function by mongoose. We do that because we don’t want to create a new model every single time we hit an API route in Next.js. If you don’t do that and just go with <code class="language-plaintext highlighter-rouge">model('Test', testSchema)</code>, you might face an error that would prevent creating/updating etc.</p> </blockquote> <h2 id="using-mongoose-in-api-routes">Using mongoose in API routes</h2> <p>Now that we have our model created, we can use it to see it in action!</p> <p>Next.js is a full-stack framework, and so it also provides a node environment where we can run Node.js back-end code easily and integrate that with the frontend.</p> <p>In the <code class="language-plaintext highlighter-rouge">pages/api</code> folder, we can create a file or folder that will ultimately create an API route and we can write back-end code in that file and call it as a REST API.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1650183014182/dxFl9KmIN.png" alt="image.png"/></p> <p>For this demo, I created a folder <code class="language-plaintext highlighter-rouge">test</code> and a file <code class="language-plaintext highlighter-rouge">add.js</code> inside of it which gives the path <code class="language-plaintext highlighter-rouge">/api/test/add</code>.</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">connectMongo</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">../../../utils/connectMongo</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">Test</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">../../../models/testModel</span><span class="dl">'</span><span class="p">;</span>

<span class="cm">/**
 * @param {import('next').NextApiRequest} req
 * @param {import('next').NextApiResponse} res
 */</span>
<span class="k">export</span> <span class="k">default</span> <span class="k">async</span> <span class="kd">function</span> <span class="nx">addTest</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">CONNECTING TO MONGO</span><span class="dl">'</span><span class="p">);</span>
    <span class="k">await</span> <span class="nx">connectMongo</span><span class="p">();</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">CONNECTED TO MONGO</span><span class="dl">'</span><span class="p">);</span>

    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">CREATING DOCUMENT</span><span class="dl">'</span><span class="p">);</span>
    <span class="kd">const</span> <span class="nx">test</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">Test</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">);</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">CREATED DOCUMENT</span><span class="dl">'</span><span class="p">);</span>

    <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">({</span> <span class="nx">test</span> <span class="p">});</span>
  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">({</span> <span class="nx">error</span> <span class="p">});</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>Here, we import the <code class="language-plaintext highlighter-rouge">connectMongo</code> function and our <code class="language-plaintext highlighter-rouge">Test</code> model that we created from the respective files. And the big comment I have at the top is <a href="https://jsdoc.app/">JSDoc</a> which can be used to provide autocomplete and typing in the IDE. You can omit it if you want.</p> <p>Finally, the code is simple and straightforward, you can use the normal <code class="language-plaintext highlighter-rouge">mongoose</code> style code to create a new document. By getting the data from <code class="language-plaintext highlighter-rouge">req.body</code>.</p> <p>You can test it from the <a href="https://www.thunderclient.com/">Thunder Client</a> extension in VS Code, <a href="https://www.postman.com/">Postman</a> or <a href="https://insomnia.rest/download">Insomnia</a>. Whatever you wish! I like to use Thunder Client.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1650183454458/zEdrw_Mvy.png" alt="image.png"/></p> <h2 id="create-new-document-from-front-end">Create new document from front-end</h2> <p>Now that we have our back-end API created and we have verified that it’s working, we can quickly write some front-end code to make it usable in our app.</p> <p>On the homepage inside the <code class="language-plaintext highlighter-rouge">index.js</code> file, I changed the file so that when we click the button, a new document will get added to the database.</p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">Head</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">next/head</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">Image</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">next/image</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">styles</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">../styles/Home.module.css</span><span class="dl">'</span><span class="p">;</span>

<span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nx">Home</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">createTest</span> <span class="o">=</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">randomNum</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">);</span>
    <span class="kd">const</span> <span class="nx">res</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">fetch</span><span class="p">(</span><span class="dl">'</span><span class="s1">/api/test/add</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
      <span class="na">method</span><span class="p">:</span> <span class="dl">'</span><span class="s1">POST</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">headers</span><span class="p">:</span> <span class="p">{</span>
        <span class="dl">'</span><span class="s1">Content-Type</span><span class="dl">'</span><span class="p">:</span> <span class="dl">'</span><span class="s1">application/json</span><span class="dl">'</span><span class="p">,</span>
      <span class="p">},</span>
      <span class="na">body</span><span class="p">:</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span>
        <span class="na">name</span><span class="p">:</span> <span class="s2">`Test </span><span class="p">${</span><span class="nx">randomNum</span><span class="p">}</span><span class="s2">`</span><span class="p">,</span>
        <span class="na">email</span><span class="p">:</span> <span class="s2">`test</span><span class="p">${</span><span class="nx">randomNum</span><span class="p">}</span><span class="s2">@test.com`</span><span class="p">,</span>
      <span class="p">}),</span>
    <span class="p">});</span>
    <span class="kd">const</span> <span class="nx">data</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">();</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
  <span class="p">};</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className</span><span class="p">=</span><span class="si">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">container</span><span class="si">}</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nc">Head</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Create Next App<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">name</span><span class="p">=</span><span class="s">'description'</span> <span class="na">content</span><span class="p">=</span><span class="s">'Generated by create next app'</span> <span class="p">/&gt;</span>
        <span class="p">&lt;</span><span class="nt">link</span> <span class="na">rel</span><span class="p">=</span><span class="s">'icon'</span> <span class="na">href</span><span class="p">=</span><span class="s">'/favicon.ico'</span> <span class="p">/&gt;</span>
      <span class="p">&lt;/</span><span class="nc">Head</span><span class="p">&gt;</span>

      <span class="p">&lt;</span><span class="nt">main</span> <span class="na">className</span><span class="p">=</span><span class="si">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">main</span><span class="si">}</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">button</span> <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="nx">createTest</span><span class="si">}</span><span class="p">&gt;</span>Create Test<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">h1</span> <span class="na">className</span><span class="p">=</span><span class="si">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">title</span><span class="si">}</span><span class="p">&gt;</span>
          Welcome to <span class="p">&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="p">=</span><span class="s">'https://nextjs.org'</span><span class="p">&gt;</span>Next.js!<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>
        <span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>

        <span class="p">&lt;</span><span class="nt">p</span> <span class="na">className</span><span class="p">=</span><span class="si">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">description</span><span class="si">}</span><span class="p">&gt;</span>
          Get started by editing<span class="si">{</span><span class="dl">'</span><span class="s1"> </span><span class="dl">'</span><span class="si">}</span>
          <span class="p">&lt;</span><span class="nt">code</span> <span class="na">className</span><span class="p">=</span><span class="si">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">code</span><span class="si">}</span><span class="p">&gt;</span>pages/index.js<span class="p">&lt;/</span><span class="nt">code</span><span class="p">&gt;</span>
        <span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>

        <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className</span><span class="p">=</span><span class="si">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">grid</span><span class="si">}</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
      <span class="p">&lt;/</span><span class="nt">main</span><span class="p">&gt;</span>

      <span class="p">&lt;</span><span class="nt">footer</span> <span class="na">className</span><span class="p">=</span><span class="si">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">footer</span><span class="si">}</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">a</span>
          <span class="na">href</span><span class="p">=</span><span class="s">'https://vercel.com?utm_source=create-next-app&amp;utm_medium=default-template&amp;utm_campaign=create-next-app'</span>
          <span class="na">target</span><span class="p">=</span><span class="s">'_blank'</span>
          <span class="na">rel</span><span class="p">=</span><span class="s">'noopener noreferrer'</span>
        <span class="p">&gt;</span>
          Powered by<span class="si">{</span><span class="dl">'</span><span class="s1"> </span><span class="dl">'</span><span class="si">}</span>
          <span class="p">&lt;</span><span class="nt">span</span> <span class="na">className</span><span class="p">=</span><span class="si">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">logo</span><span class="si">}</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nc">Image</span> <span class="na">src</span><span class="p">=</span><span class="s">'/vercel.svg'</span> <span class="na">alt</span><span class="p">=</span><span class="s">'Vercel Logo'</span> <span class="na">width</span><span class="p">=</span><span class="si">{</span><span class="mi">72</span><span class="si">}</span> <span class="na">height</span><span class="p">=</span><span class="si">{</span><span class="mi">16</span><span class="si">}</span> <span class="p">/&gt;</span>
          <span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
        <span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>
      <span class="p">&lt;/</span><span class="nt">footer</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div> <h2 id="fetch-and-display-documents">Fetch and display documents</h2> <p>Now it’s time to use Next.js’s best feature! Server-Side Rendering. We can use SSR in Next.js to easily run back-end Node.js code as we want and the data can be easily accessible through the <code class="language-plaintext highlighter-rouge">props</code> to the page.</p> <p>In the <code class="language-plaintext highlighter-rouge">index.js</code> file itself, we’ll import the <code class="language-plaintext highlighter-rouge">connectMongo</code> and <code class="language-plaintext highlighter-rouge">Test</code> again and use them inside the <code class="language-plaintext highlighter-rouge">getServerSideProps</code> function that we have to export like this 👇</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">connectMongo</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">../utils/connectMongo</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">Test</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">../models/testModel</span><span class="dl">'</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">getServerSideProps</span> <span class="o">=</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">CONNECTING TO MONGO</span><span class="dl">'</span><span class="p">);</span>
    <span class="k">await</span> <span class="nx">connectMongo</span><span class="p">();</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">CONNECTED TO MONGO</span><span class="dl">'</span><span class="p">);</span>

    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">FETCHING DOCUMENTS</span><span class="dl">'</span><span class="p">);</span>
    <span class="kd">const</span> <span class="nx">tests</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">Test</span><span class="p">.</span><span class="nx">find</span><span class="p">();</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">FETCHED DOCUMENTS</span><span class="dl">'</span><span class="p">);</span>

    <span class="k">return</span> <span class="p">{</span>
      <span class="na">props</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">tests</span><span class="p">:</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">tests</span><span class="p">)),</span>
      <span class="p">},</span>
    <span class="p">};</span>
  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
    <span class="k">return</span> <span class="p">{</span>
      <span class="na">notFound</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="p">};</span>
  <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div> <p>In this function, we can easily fetch any data we want and it will be done on the server and then we have to <strong>return</strong> it as <code class="language-plaintext highlighter-rouge">props</code>. That will be accessible to the page. You can read about <a href="https://nextjs.org/docs/basic-features/data-fetching/get-server-side-props"><code class="language-plaintext highlighter-rouge">getServerSideProps</code> on the Next.js docs</a></p> <blockquote> <p>IMPORTANT: Make sure to sanitize the <code class="language-plaintext highlighter-rouge">tests</code> variable with <code class="language-plaintext highlighter-rouge">JSON.parse(JSON.stringify(tests))</code> because it contains <code class="language-plaintext highlighter-rouge">ObjectID</code> from MongoDB instead of a normal string. This trick converts it into a string that can be passed in the <code class="language-plaintext highlighter-rouge">return</code> object.</p> </blockquote> <p>That’s it! After we’re done fetching the data we can easily display it by accessing it through the props on our page and we can use it however we want. In this case we’ll map over that data to output every document like so</p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nx">Home</span><span class="p">({</span> <span class="nx">tests</span> <span class="p">})</span> <span class="p">{</span>
  <span class="c1">// ...</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="c1">//   ...</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className</span><span class="p">=</span><span class="si">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">grid</span><span class="si">}</span><span class="p">&gt;</span>
      <span class="si">{</span><span class="nx">tests</span><span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="nx">test</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span>
        <span class="p">&lt;</span><span class="nt">a</span>
          <span class="na">href</span><span class="p">=</span><span class="s">"https://nextjs.org/docs"</span>
          <span class="na">key</span><span class="p">=</span><span class="si">{</span><span class="nx">test</span><span class="p">.</span><span class="nx">_id</span><span class="si">}</span>
          <span class="na">className</span><span class="p">=</span><span class="si">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">card</span><span class="si">}</span>
        <span class="p">&gt;</span>
          <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">test</span><span class="p">.</span><span class="nx">name</span><span class="si">}</span> <span class="ni">&amp;rarr;</span><span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
          <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">test</span><span class="p">.</span><span class="nx">email</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
        <span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>
      <span class="p">))</span><span class="si">}</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="c1">// ...</span>
  <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div> <p>Finally, this is what our page looks like:</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1650184603173/bbdiBR1rw.png" alt="image.png"/></p> <p>I have explained everything deeply in the YouTube tutorial below 👇👇</p> <div class="mb-6 aspect-video"> <iframe src="https://www.youtube.com/embed/cM0pA50R20M" class="w-full h-full rounded-xl" allowfullscreen="" loading="lazy"> </iframe> </div> <p>I hope this post helped you successfully set up Mongoose in your Next.js app. If it did, please leave a like!</p> <p>Comment down your thoughts! There is always room for improvement so let me know your suggestions on this project!</p> <p><strong>Connect with me on my <a href="https://youtube.com/MaxProgramming">YouTube channel</a> and my <a href="https://twitter.com/maxprogramming1">Twitter</a> 😉</strong></p> <p>Thanks for reading ✌</p>]]></content><author><name>Usman Sabuwala</name></author><category term="web"/><category term="mongodb"/><category term="next-js"/><summary type="html"><![CDATA[Learn using Mongoose for MongoDB by building a hands-on project!]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://cdn.hashnode.com/res/hashnode/image/upload/v1650187197534/EONUGmGt8.png"/><media:content medium="image" url="https://cdn.hashnode.com/res/hashnode/image/upload/v1650187197534/EONUGmGt8.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">No-Code Ways to Contribute to Open Source Projects</title><link href="https://genicsblog.com/benny/no-code-ways-to-contribute-to-open-source-projects" rel="alternate" type="text/html" title="No-Code Ways to Contribute to Open Source Projects"/><published>2022-04-14T00:00:00+00:00</published><updated>2022-04-14T00:00:00+00:00</updated><id>https://genicsblog.com/benny/how-to-contribute-to-open-source-projects-as-a-non-coder</id><content type="html" xml:base="https://genicsblog.com/benny/no-code-ways-to-contribute-to-open-source-projects"><![CDATA[<p>A few weeks ago, I came across Edidiong Asikpo’s <a href="https://edidiongasikpo.com/the-technical-writers-guide-to-contributing-to-open-source-projects">article</a> about contributing to open-source projects. The article piqued my interest and I set out to learn how to contribute to open-source projects without possibly writing any code.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1634907925426/tBnszIUMD.png" alt="get started with open source"/></p> <p>In this article, I will share with you what I discovered and also mention some non-code ways you can contribute, open-source projects you can contribute to, and helpful resources.</p> <h1 id="table-of-contents">Table of Contents</h1> <ul> <li><a href="#what-are-open-source-projects">What are Open Source Projects?</a></li> <li><a href="#how-can-technical-writers-and-non-code-individuals-contribute-to-open-source-projects">How can technical writers and non-code individuals contribute to open source projects?</a></li> <li><a href="#benefits-of-contributing-to-open-source-projects">Benefits of contributing to open-source projects</a></li> <li><a href="#open-source-projects">Open Source Projects</a></li> <li><a href="#conclusion">Conclusion</a></li> <li><a href="#helpful-resources">Helpful resources</a></li> </ul> <h1 id="what-are-open-source-projects">What are Open Source Projects?</h1> <p>Open Source is a term used to describe software whose original source code is freely available, can be redistributed, and also modified. Open Source embodies a spirit of collaboration, transparency, and community-oriented contributions, among other things.</p> <h1 id="how-can-technical-writers-and-non-code-individuals-contribute-to-open-source-projects">How can technical writers and non-code individuals contribute to open source projects?</h1> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1634906360847/aibto3F98.png" alt="How can technical writer, designer and non coders contribute to open source" width="70%"/></p> <p>Like many people, I used to think it was impossible to contribute to open source projects without having any coding skills but reading various articles written by <a href="https://twitter.com/ParkerKesi">Kesi Parker</a> and <a href="https://twitter.com/Didicodes">Edidiong Asikpo</a> helped debunk this notion.</p> <p>In this section, I will mention some non-code ways you can contribute to open source projects as a non-coder.</p> <ol> <li> <p><strong>Do you like to write?</strong> You can help to improve or write the project documentation. You can also create translated documentation for the project.</p> </li> <li> <p><strong>How about design?</strong> As a designer, you can contribute to open source projects by restructuring the project’s usability. You can also create a logo and style guide.</p> </li> <li> <p><strong>Have a knack for organizing perhaps?</strong> You can suggest issues labels and close open issues to keep the repository clean.</p> </li> <li> <p><strong>Do you enjoy assisting others?</strong> Moderate discussion boards and respond to questions on forums like Microsoft Tech Community, Reddit, and Stack Overflow.</p> </li> <li> <p><strong>Teaching?</strong> Write how-to and educational tutorials, as well as supporting materials. You can also create YouTube videos about the software.</p> </li> <li> <p><strong>Advocating?</strong> Organize project-related workshops or meetups. You could motivate others by telling them about your personal experiences.</p> </li> <li> <p><strong>Join testing and insider programs:</strong> Finding and reporting bugs, and providing honest feedback on a project can increase its success rate and provide a better user experience.</p> </li> </ol> <p>So no, you don’t have to code to contribute. While this is by no means an exhaustive list, it should be enough to get you started.</p> <h1 id="benefits-of-contributing-to-open-source-projects">Benefits of contributing to open-source projects</h1> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1634906376850/1b1HfYy7-.png" alt="Benefits of contributing to open source projects" width="70%"/></p> <p>While there are usually no direct monetary benefits to contributing, there are other ways you as a contributor can benefit:</p> <ul> <li>Upskilling and the opportunity to improve on existing skills.</li> <li>Creating a portfolio and personal achievement.</li> <li>Meeting like-minded people and networking.</li> <li>Understanding the application development and maintenance cycles.</li> <li>Community recognition.</li> <li>Self-recognition as an open-source contributor.</li> <li>Recommendation, referral, and increased job opportunities. Here is a <a href="https://www.freecodecamp.org/news/cracking-google-season-of-docs-2020/">testimony</a></li> <li>Mentorship and knowledge sharing.</li> <li>Community building.</li> <li><strong>Compensation:</strong> There are rarely any direct monetary incentives. However, programs such as <a href="https://developers.google.com/season-of-docs">Google Season of Docs</a>, <a href="https://summerofcode.withgoogle.com/">Google Summer of Code</a>, <a href="https://wiki.hyperledger.org/display/INTERN">Hyperledger Mentorship Program</a>, <a href="https://www.outreachy.org/">Outreachy</a>, and the <a href="https://docs.opencollective.com/help/contributing/development/bounties">Open Collective bounty program</a> pay you to contribute.</li> </ul> <h1 id="open-source-projects">Open Source Projects</h1> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1634909151136/IR4gF5koo.png" alt="where can i find oen source projects"/></p> <p>Today, there are a lot of open-source projects you can contribute to and it is up to you to choose the ones that interest you. Below are a few open-source projects you can choose from; take your time to go through each resource and see which one appeals to you.</p> <ul> <li><a href="https://aws.amazon.com/blogs/aws/aws-documentation-is-now-open-source-and-on-github/">AWS</a></li> <li><a href="https://uber.github.io/#/">Uber</a></li> <li><a href="https://www.xwiki.org/xwiki/bin/view/Main/WebHome">XWiki</a></li> <li><a href="https://www.netlify.com/open-source/">Netlify</a></li> <li><a href="https://gitlab.com/gitlab-org/gitlab-docs">GitLab</a></li> <li><a href="https://fedoraproject.org/wiki/Join">Fedora</a></li> <li><a href="https://opensource.twitter.dev/">Twitter</a></li> <li><a href="https://wiki.gnome.org/DocumentationProject/Contributing">Gnome</a></li> <li><a href="https://support.mozilla.org/en-US/kb/improve-knowledge-base">Mozilla</a></li> <li><a href="https://spotify.github.io/">Spotify</a></li> <li><a href="https://opensource.google/">Google</a></li> <li><a href="https://httpd.apache.org/docs-project/">Apache</a></li> <li><a href="https://opensource.fb.com/">Facebook</a></li> <li><a href="https://kubernetes.io/docs/contribute/">Kubernetes</a></li> <li><a href="https://wiki.documentfoundation.org/Design">Wiki Design</a></li> <li><a href="https://www.bewelcome.org/">BeWelcome</a></li> <li><a href="https://github.com/MicrosoftDocs">Microsoft Docs</a></li> <li><a href="https://www.opensourceagenda.com/projects/wordpress-ios">WordPress IOS</a></li> <li><a href="https://awesomeopensource.com/projects/geeksforgeeks">GeeksforGeeks</a></li> <li><a href="https://www.opensourceagenda.com/projects/freecodecamp">FreeCodeCamp</a></li> <li><a href="https://docs.microsoft.com/en-us/powershell/scripting/community/contributing/overview">Microsoft PowerShell</a></li> <li><a href="https://www.redox-os.org/rsoc/">Redox OS Summer of Code</a></li> <li><a href="https://wiki.linuxfoundation.org/lkmp">Linux Kernel Mentorship Program</a></li> <li><a href="https://www.openmainframeproject.org/projects/mentorship-program">Open Mainframe Project Mentorship Program</a></li> </ul> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1634907052703/LjEoL70YX.png" alt="oen source projects to contribute for beginners" width="70%"/></p> <p>You can also use <a href="https://github.com/explore/">GitHub Explore</a>, <a href="https://awesomeopensource.com/projects/movies/tv-shows">Awesome Open-Source</a>, and <a href="https://www.opensourceagenda.com/">Open-Source Agenda</a> to find more open-source projects. If you’re only interested in documentation, <a href="https://amrutaranade.com/2018/03/21/list-of-open-source-projects-that-accept-docs-contributions/">Amruta’s article</a> can help, and <a href="https://www.works-hub.com/issues/">WorkHub</a> is a great place to start if you’re looking for job opportunities.</p> <h1 id="conclusion">Conclusion.</h1> <p>Contributing can be both enjoyable and rewarding.</p> <p>For a start, you should check out this repo</p> <ul> <li><a href="https://github.com/firstcontributions/first-contributions">beginner’s first contribution repository</a></li> <li><a href="https://github.com/mazipan/hello-open-source">Hello Open Source by Irfan Maulana</a></li> <li><a href="https://github.com/szabgab/awesome-for-non-programmers">Awesome for non-programmers</a> and make your first contribution right away.</li> </ul> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1634907775967/xtpNV3-xc.png" alt="how can you contribute to open source without coding" width="70%"/></p> <h1 id="helpful-resources">Helpful resources.</h1> <ul> <li> <p><strong>Hacktoberfest 2021:</strong> <a href="https://vinitshahdeo.dev/beginner-friendly-issues-for-hacktoberfest-2021">Beginner-friendly projects</a></p> </li> <li><strong>Contributing as a designer:</strong> <ul> <li><a href="https://opensourcedesign.net/contributing/">Open-source Design</a></li> <li><a href="https://uxdesign.cc/dear-designers-please-help-a5436907be8b">Dear designers, please contribute to open source</a></li> </ul> </li> <li><strong>Contributing as a technical writer:</strong> <ul> <li><a href="https://edidiongasikpo.com/the-technical-writers-guide-to-contributing-to-open-source-projects">The Technical Writers Guide to Contributing to Open Source Projects</a></li> <li><a href="https://medium.com/technical-writing-is-easy/open-source-projects-for-technical-writers-de53fb3dd4c9">Open-Source Projects for Technical Writers</a></li> </ul> </li> <li><strong>How to contribute to open source projects as a beginner?</strong> <ul> <li><a href="https://blog.toluadegboyega.dev/a-beginners-guide-to-open-source">A Beginner’s Guide to Open Source</a></li> <li><a href="https://www.freecodecamp.org/news/how-to-contribute-to-open-source-projects-beginners-guide/">How to Contribute to Open Source Projects – A Beginner’s Guide</a></li> </ul> </li> <li><strong>Looking for the right fit?</strong> <a href="https://blog.avneesh.tech/finding-the-right-open-source-projects-to-contribute-to">Finding the Right Open Source Projects to Contribute to</a></li> </ul> <p>If you have read this far, I really appreciate it!</p> <p>You can connect with me at <a href="https://twitter.com/Bennykillua">Twitter</a>, <a href="https://www.linkedin.com/in/ifeanyi-iheagwara/">LinkedIn</a> or <a href="https://github.com/Bennykillua">Github</a>.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1634907816659/aeKfblKCv.png" alt="can anyone contribute to open source projects"/></p>]]></content><author><name>Benny Ifeanyi Iheagwara</name></author><category term="open-source"/><category term="beginners"/><category term="open-source"/><category term="tips"/><summary type="html"><![CDATA[In this article, I share what I have discovered about open-source and include some non-technical ways you can contribute to open-source projects along with helpful resources!]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://cdn.hashnode.com/res/hashnode/image/upload/v1634905825976/pjc7Kwv_F.png"/><media:content medium="image" url="https://cdn.hashnode.com/res/hashnode/image/upload/v1634905825976/pjc7Kwv_F.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">Adding Multiple Authors to a Jekyll Blog got Easier!</title><link href="https://genicsblog.com/gouravkhunger/adding-multiple-authors-to-a-jekyll-blog-got-easier" rel="alternate" type="text/html" title="Adding Multiple Authors to a Jekyll Blog got Easier!"/><published>2022-04-10T00:00:00+00:00</published><updated>2022-04-10T00:00:00+00:00</updated><id>https://genicsblog.com/gouravkhunger/adding-multiple-authors-to-a-jekyll-blog-got-easier</id><content type="html" xml:base="https://genicsblog.com/gouravkhunger/adding-multiple-authors-to-a-jekyll-blog-got-easier"><![CDATA[<p>A Jekyll powered blog doesn’t have the support for multiple authors out of the box. I faced the same issue for <a href="/">Genics Blog</a>. I’ve built the blog from scratch using Jekyll.</p> <p>The primary feature of this publication is having the support for multiple authors. I have tackled this problem in two ways which I’ll be discussing in this post!</p> <h1 id="1-traditional-approach-using-data-files">1. Traditional approach using data files</h1> <p>The traditional approach is very straight forward but comes with its own limitations.</p> <p>We start by defining a file inside the <strong><code class="language-plaintext highlighter-rouge">_data/</code></strong> folder that hosts author’s information.</p> <p><strong><code class="language-plaintext highlighter-rouge">_data/authors.yml</code></strong></p> <div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">johndoe</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s2">"</span><span class="s">John</span><span class="nv"> </span><span class="s">Doe"</span>
  <span class="na">bio</span><span class="pi">:</span> <span class="s2">"</span><span class="s">John</span><span class="nv"> </span><span class="s">Doe</span><span class="nv"> </span><span class="s">is</span><span class="nv"> </span><span class="s">a</span><span class="nv"> </span><span class="s">software</span><span class="nv"> </span><span class="s">engineer."</span>
  <span class="na">email</span><span class="pi">:</span> <span class="s2">"</span><span class="s">john@example.com"</span>
  <span class="na">socials</span><span class="pi">:</span>
    <span class="na">github</span><span class="pi">:</span> <span class="s2">"</span><span class="s">john-doe"</span>
    <span class="na">twitter</span><span class="pi">:</span> <span class="s2">"</span><span class="s">john_doe"</span>

<span class="na">janedoe</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Jane</span><span class="nv"> </span><span class="s">Doe"</span>
  <span class="na">bio</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Jane</span><span class="nv"> </span><span class="s">Doe</span><span class="nv"> </span><span class="s">is</span><span class="nv"> </span><span class="s">a</span><span class="nv"> </span><span class="s">systems</span><span class="nv"> </span><span class="s">engineer."</span>
  <span class="na">email</span><span class="pi">:</span> <span class="s2">"</span><span class="s">jane@example.com"</span>
  <span class="na">socials</span><span class="pi">:</span>
    <span class="na">github</span><span class="pi">:</span> <span class="s2">"</span><span class="s">jane-doe"</span>
    <span class="na">twitter</span><span class="pi">:</span> <span class="s2">"</span><span class="s">jane_doe"</span>
</code></pre></div></div> <p>Now we have the author objects in this file. Then we generate a layout that has the blueprint for the author’s page. A minimal layout looks like this:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">"en"</span><span class="nt">&gt;</span>

{% assign author = site.data.authors[page.author] %}
<span class="c">&lt;!--
  Now you can use the author variable.
  It has all the data as defined inside _data/authors.yml for the current author.
--&gt;</span>

  <span class="nt">&lt;head&gt;</span>
    <span class="c">&lt;!-- See how we can use values inside the author variable. --&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">"description"</span> <span class="na">content=</span><span class="s">{{</span> <span class="na">author.bio</span> <span class="err">}}</span><span class="nt">&gt;</span>
    <span class="c">&lt;!-- other stuff --&gt;</span>
  <span class="nt">&lt;/head&gt;</span>

  <span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;h1&gt;</span>{{ author.name }}<span class="nt">&lt;/h1&gt;</span>
    <span class="nt">&lt;p&gt;</span>{{ author.bio }}<span class="nt">&lt;/p&gt;</span>

    {% assign links = author.socials %}
    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"{{ link.twitter }}"</span><span class="nt">&gt;</span>Twitter<span class="nt">&lt;/a&gt;</span>
    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"{{ link.github }}"</span><span class="nt">&gt;</span>GitHub<span class="nt">&lt;/a&gt;</span>

    <span class="c">&lt;!--
      Here we get all the posts by the author of the current page.
      And then render a post preview box for each of the post.
    --&gt;</span>
    {% assign posts = site.posts | where_exp:"item", "item.author == page.author" %}
    {% for post in posts %}
      {% include postbox.html %}
    {% endfor %}
  <span class="nt">&lt;/body&gt;</span>

<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div> <p>Here, we get the author data for the current page and assign relevant meta information on the page. The information comes from the data files we set.</p> <p>Then we get all the posts by the author of the current page using the <code class="language-plaintext highlighter-rouge">where_exp</code> filter (<a href="https://jekyllrb.com/docs/liquid/filters/">docs for filters</a>). Then we render a post preview box for each of the post.</p> <p>The postbox can be any way you want to present the post. This is similar to what an index page would have as as to keep the structure uniform.</p> <p>Now, we assign an author to each post in the site by adding this to the post’s front matter:</p> <div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">---</span>
<span class="c1"># other config</span>
<span class="na">author</span><span class="pi">:</span> <span class="s">johndoe</span>
<span class="nn">---</span>
</code></pre></div></div> <p>We need to keep the same author username as defined in the data file.</p> <p>This sets up the configuration for the author’s page. But the pages won’t be rendered because Jekyll doesn’t know where to render the pages.</p> <p>Now, we create a collection for the author pages so that we can output author pages at the desired location.</p> <p>To create the collection, add this to the <code class="language-plaintext highlighter-rouge">_config.yml</code> file:</p> <div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">collections</span><span class="pi">:</span>
  <span class="na">authors</span><span class="pi">:</span>
    <span class="na">output</span><span class="pi">:</span> <span class="no">true</span>
    <span class="na">permalink</span><span class="pi">:</span> <span class="s">/author/:author/</span>
</code></pre></div></div> <p>This let’s us have a folder named <code class="language-plaintext highlighter-rouge">_authors/</code> in the root directoy and have the markdown files for authors there. <a href="https://jekyllrb.com/docs/collections/">More on collections &gt;</a></p> <p>Inside the folder, we add individual files named <code class="language-plaintext highlighter-rouge">johndoe.md</code> and <code class="language-plaintext highlighter-rouge">janedoe.md</code>. This renders these files at endpoints <code class="language-plaintext highlighter-rouge">/author/johndoe</code> and <code class="language-plaintext highlighter-rouge">/author/janedoe</code> respectively.</p> <p>Make sure to add these lines in the files (variable <code class="language-plaintext highlighter-rouge">author</code> changes as per file):</p> <div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">---</span>
<span class="na">layout</span><span class="pi">:</span> <span class="s">author</span>
<span class="na">author</span><span class="pi">:</span> <span class="s">johndoe</span>
<span class="nn">---</span>
</code></pre></div></div> <p>That’s it!</p> <p>This is the general way that allows us to add multiple authors to a simple Jekyll blog. Nothing fancy here. It was a bit long to setup but adding new authors is as easy as creating a new file in <code class="language-plaintext highlighter-rouge">_authors</code> folder, defining data in <code class="language-plaintext highlighter-rouge">_data/authors.yml</code> and adding the author’s name to the post’s front matter.</p> <p>But you see, this process is way tedious!</p> <p>You have to add the file for each author. Sure, it scales well upto about 10-15 authors. But for a publication like <a href="/">Genics Blog</a> that is consistently gaining traction for new authors, this becomes a pain.</p> <p>I had set up an automated process using GitHub Actions that would add the markdown file in <code class="language-plaintext highlighter-rouge">_authors</code> folder as soon as a PR for a new author profile is received. But that doesn’t scale well and isn’t the most optimum way to do it!</p> <p>So I spent some time building up a solution for this. Let’s look at how it works!</p> <h1 id="2-using-my-plugin-jekyll-auto-authors">2. Using my plugin jekyll-auto-authors</h1> <p>There’s a major issue of pagination with the above approach. For example, let’s take <a href="/author/gouravkhunger/">my profile</a> at Genics Blog. I’ve got tons of posts. Along with Each post has a thumbnail image associated with it.</p> <p>The above method doesn’t have pagination support. Now if all the posts are listed in a single page, the page speed becomes too low.</p> <p>I’ve already setup <a href="https://github.com/sverrirs/jekyll-paginate-v2"><code class="language-plaintext highlighter-rouge">jekyll-paginate-v2</code></a> for paginating category and tag pages. But it doesn’t work with authors. Also, it has got an amazing autopages feature for auto-generating category and tag pages that I use extensively for Genics.</p> <p>I wished to integrate autopages for authors functionality to it, but the paginate-v2 plugin isn’t being actively maintained. So I decided to build <a href="https://github.com/gouravkhunger/jekyll-auto-authors" rel="dofollow"><code class="language-plaintext highlighter-rouge">jekyll-auto-authors</code></a> that works in sync with it. Drop a star at GitHub to show support!</p> <p>Let’s look at how to start using the plugin. If you prefer a video tutorial, watch this:</p> <div class="mb-6 aspect-video"> <iframe src="https://www.youtube.com/embed/V5Ly6T_bWwU" class="w-full h-full rounded-xl" allowfullscreen="" loading="lazy"> </iframe> </div> <h2 id="setup">Setup</h2> <p>Add the plugin to your <code class="language-plaintext highlighter-rouge">Gemfile</code> inside <code class="language-plaintext highlighter-rouge">jekyll_plugins</code> group:</p> <div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">group</span> <span class="ss">:jekyll_plugins</span> <span class="k">do</span>
    <span class="c1"># other gems</span>
    <span class="n">gem</span> <span class="s2">"jekyll-paginate-v2"</span> <span class="c1"># reqiured for jekyll-auto-authors to work</span>
    <span class="n">gem</span> <span class="s2">"jekyll-auto-authors"</span>
<span class="k">end</span>
</code></pre></div></div> <p>Now, execute:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bundle <span class="nb">install</span>
</code></pre></div></div> <h2 id="usage">Usage</h2> <p>This plugin fits well inside the configuration for <code class="language-plaintext highlighter-rouge">jekyll-paginate-v2</code> plugin.</p> <p>First, you need to set pagination configuration inside <code class="language-plaintext highlighter-rouge">_config.yml</code> file. This is similar to what the pagination plugin does.</p> <div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">pagination</span><span class="pi">:</span>
  <span class="na">enabled</span><span class="pi">:</span> <span class="no">true</span>
  <span class="na">per_page</span><span class="pi">:</span> <span class="m">9</span>
  <span class="na">permalink</span><span class="pi">:</span> <span class="s1">'</span><span class="s">/page/:num/'</span>
  <span class="na">title</span><span class="pi">:</span> <span class="s1">'</span><span class="s">:title</span><span class="nv"> </span><span class="s">-</span><span class="nv"> </span><span class="s">page</span><span class="nv"> </span><span class="s">:num'</span>
  <span class="na">sort_field</span><span class="pi">:</span> <span class="s1">'</span><span class="s">date'</span>
  <span class="na">sort_reverse</span><span class="pi">:</span> <span class="no">true</span>
</code></pre></div></div> <p>This configuration will be used for the pagination on the generated author pages. The above example defines that each page should get 9 posts at max. The permalink of first page is same, but the later pages get <code class="language-plaintext highlighter-rouge">/page/:num</code> appended to it. <code class="language-plaintext highlighter-rouge">:num</code> gets converted to the page number.</p> <p>You can skip the pagination by setting <code class="language-plaintext highlighter-rouge">enabled: false</code>, if you only care about auto-generation of author pages.</p> <p>Now we’ll define the autopages config for authors.</p> <p>Define an <code class="language-plaintext highlighter-rouge">autopages</code> block to set up author autopages:</p> <div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">autopages</span><span class="pi">:</span>

  <span class="c1"># Other autopage configs for jekyll-paginate-v2 stay the same</span>

  <span class="na">authors</span><span class="pi">:</span>
    <span class="na">enabled</span><span class="pi">:</span> <span class="no">true</span> <span class="c1"># adding false here stops the auto-generation</span>
    <span class="na">data</span><span class="pi">:</span> <span class="s1">'</span><span class="s">_data/authors.yml'</span> <span class="c1"># Data file with the author details</span>
    <span class="na">layouts</span><span class="pi">:</span> 
      <span class="pi">-</span> <span class="s1">'</span><span class="s">author.html'</span> <span class="c1"># We'll define this layout later, will be used for each author</span>
    <span class="na">title</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Posts</span><span class="nv"> </span><span class="s">by</span><span class="nv"> </span><span class="s">:author'</span>
    <span class="na">permalink</span><span class="pi">:</span> <span class="s1">'</span><span class="s">/author/:author/'</span>
    <span class="na">slugify</span><span class="pi">:</span>
      <span class="na">mode</span><span class="pi">:</span> <span class="s1">'</span><span class="s">default'</span> <span class="c1"># choose from [raw, default, pretty, ascii or latin]</span>
      <span class="na">cased</span><span class="pi">:</span> <span class="no">true</span> <span class="c1"># if true, the uppercase letters in slug will be converted to lowercase ones.</span>
</code></pre></div></div> <p>That’s it for the autopages and pagination configuration.</p> <p>As an example, we will use the same <code class="language-plaintext highlighter-rouge">_data/authors.yml</code> file as generated in the previous step.</p> <p>All the data for an author is passed on to the liquid template inside the <code class="language-plaintext highlighter-rouge">page.pagination.author_data</code> variable so that you can render it as you wish!</p> <p>Let’s define a basic template for the <code class="language-plaintext highlighter-rouge">author.html</code> layout so you get a gist of how to use it:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">"en"</span><span class="nt">&gt;</span>

{% assign author = page.pagination.author_data %}
<span class="c">&lt;!--
  Now you can use the author variable anyhow.
  It has all the data as defined inside _data/authors.yml for the current author.
--&gt;</span>

  <span class="nt">&lt;head&gt;</span>
    <span class="c">&lt;!-- See how we can use values inside the author variable. --&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">"description"</span> <span class="na">content=</span><span class="s">{{</span> <span class="na">author.bio</span> <span class="err">}}</span><span class="nt">&gt;</span>
    <span class="c">&lt;!-- other stuff --&gt;</span>
  <span class="nt">&lt;/head&gt;</span>

  <span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;h1&gt;</span>{{ author.name }}<span class="nt">&lt;/h1&gt;</span>
    <span class="nt">&lt;p&gt;</span>{{ author.bio }}<span class="nt">&lt;/p&gt;</span>

    {% assign links = author.socials %}
    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"{{ link.twitter }}"</span><span class="nt">&gt;</span>Twitter<span class="nt">&lt;/a&gt;</span>
    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"{{ link.github }}"</span><span class="nt">&gt;</span>GitHub<span class="nt">&lt;/a&gt;</span>

    <span class="c">&lt;!--
      The main logic for rendering an author's posts resides here.
      The plugin exposes a paginator object that you can use to loop through the post.
      It handles all the pagination logic for you.
    --&gt;</span>
    {% for post in paginator.posts %}
      {% include postbox.html %}
    {% endfor %}

    <span class="c">&lt;!--
      If you don't want pagination, you can use the old way!
    --&gt;</span>
    {% assign posts = site.posts | where_exp:"item", "item.author.name == author.name" %}
    {% for post in posts %}
      {% include postbox.html %}
    {% endfor %}
  <span class="nt">&lt;/body&gt;</span>

<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div> <p>That’s it for the configuration!</p> <p>Now, you can go to any post and just drop in the username to the frontmatter of the post.</p> <div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">---</span>
<span class="c1"># other configs</span>
<span class="na">author</span><span class="pi">:</span> <span class="s">johndoe</span>
<span class="nn">---</span>
</code></pre></div></div> <p>Once you run the build, you’ll see the author page for <code class="language-plaintext highlighter-rouge">johndoe</code> come inside the <code class="language-plaintext highlighter-rouge">_site/author/johndoe/</code> directory. If there are a lot of posts by <code class="language-plaintext highlighter-rouge">johndoe</code> and pagination is set up correctly, it will generate pagination pages as defined in the <code class="language-plaintext highlighter-rouge">pagination</code> block of <code class="language-plaintext highlighter-rouge">_config.yml</code> file.</p> <h2 id="how-does-it-work">How does it work?</h2> <p>Read on how it works at the <a href="https://github.com/gouravkhunger/jekyll-auto-authors#how-does-it-work">GitHub repository</a>.</p> <h1 id="conclusion">Conclusion</h1> <p>I hope this article helped you understand the different ways to add multiple authors to a Jekyll blog!</p> <p>Quick recap, we learnt how to add multiple authors to a Jekyll blog:</p> <ul> <li>Using the traditional manual author pages with data file method. This has caveats.</li> <li>Using my plugin <a href="https://github.com/gouravkhunger/jekyll-auto-authors"><code class="language-plaintext highlighter-rouge">jekyll-auto-authors</code></a> which also has pagination support.</li> </ul> <p>Please drop a comment or join <a href="https://discord.genicsblog.com">our discord server</a> if you need some help!</p>]]></content><author><name>Gourav Khunger</name></author><category term="jekyll"/><category term="open-source"/><category term="libraries"/><summary type="html"><![CDATA[Jekyll doesn't support multiple authors out of the box. But we can add that functionality using this plugin I made!]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://user-images.githubusercontent.com/46792249/162621431-f9004144-8a56-4cb5-b3ac-5c5a2660a6fa.png"/><media:content medium="image" url="https://user-images.githubusercontent.com/46792249/162621431-f9004144-8a56-4cb5-b3ac-5c5a2660a6fa.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">How to Create a Pull Request in GitHub *Correctly*</title><link href="https://genicsblog.com/gouravkhunger/how-to-create-a-pull-request-in-github-correctly" rel="alternate" type="text/html" title="How to Create a Pull Request in GitHub *Correctly*"/><published>2022-04-03T00:00:00+00:00</published><updated>2022-04-03T00:00:00+00:00</updated><id>https://genicsblog.com/gouravkhunger/how-to-create-a-pull-request-in-github-correctly</id><content type="html" xml:base="https://genicsblog.com/gouravkhunger/how-to-create-a-pull-request-in-github-correctly"><![CDATA[<p>A major aspect of open source is the ability to create and maintain a community of developers who collaborate on building software together. Collaboration is a key component of open source development!</p> <p><a href="https://git-scm.com">Git</a> and <a href="https://github.com">GitHub</a> are popular open source collaboration tools. Git helps you keep track of changes to your code, and GitHub helps you share your code with others. In this article, we will teach you how to create a pull request in GitHub in the correct way.</p> <p>We will use this <a href="https://github.com/gouravkhunger/PRs-demo">demo repository</a> to demonstrate the process on collaboration. Feel free to play with it and see how it works. Follow along with the tutorial below.</p> <h2 id="1-fork-the-repository">1. Fork the Repository</h2> <p>Forking a repository means you are creating a copy of the repository to your own GitHub account. This makes a clone of the repository that you can work on.</p> <p>Any changes to your fork will not affect the original repository! Thus, it is kind of a playground area for you to experiment with code/files.</p> <p>To fork a repository, simply press the <strong>Fork</strong> button on the top right corner of the repository page:</p> <p><img src="https://user-images.githubusercontent.com/46792249/161415696-9e0772ed-60a6-4f5d-98d5-3976217fdc1a.png" alt="Fork button on GitHub" width="80%"/></p> <p>This creates a new repository in your account.</p> <h2 id="2-clone-the-repository">2. Clone the Repository</h2> <p>Cloning a repository means you are downloading the repository to your computer. This creates a folder that you will work on.</p> <p>Run this command in your terminal:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/&lt;your-username&gt;/PRs-demo
</code></pre></div></div> <p>This will clone the repository to a folder names <code class="language-plaintext highlighter-rouge">PRs-demo</code> which you can <code class="language-plaintext highlighter-rouge">cd</code> into:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd </span>PRs-demo
</code></pre></div></div> <h2 id="3-create-a-new-branch">3. Create a New Branch</h2> <p>Branching is a way to work on a different version of files in a project with Git version control. Creating a new branch is effective when you are working on a new feature or bug fix. Here’s why:</p> <ul> <li>It helps to keep changes organized and clean.</li> <li>It separates changes from working code in the main branch. In case of broken code, you can easily revert to the main branch.</li> <li>This also helps your fork’s main branch clean once your PRs are merged (more on this later).</li> </ul> <p>Run this command in your terminal:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git checkout <span class="nt">-b</span> &lt;new-branch-name&gt;
</code></pre></div></div> <p>Here, <code class="language-plaintext highlighter-rouge">&lt;new-branch-name&gt;</code> is the name of the new branch. It can be anything like: <code class="language-plaintext highlighter-rouge">bug-fix</code>, <code class="language-plaintext highlighter-rouge">feature-1</code>, <code class="language-plaintext highlighter-rouge">feature-2</code>, etc. For simplicity purpose you can keep it <code class="language-plaintext highlighter-rouge">learning-about-prs</code>.</p> <p>The <code class="language-plaintext highlighter-rouge">-b</code> flag is used to create a new branch, and <code class="language-plaintext highlighter-rouge">checkout</code> asks Git to switch to that new branch we created.</p> <p>To verify that you have correctly switched to the new branch, run:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git branch
</code></pre></div></div> <p>This should output something like this:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>* learning-about-prs
  main
</code></pre></div></div> <p>The <code class="language-plaintext highlighter-rouge">*</code> verifies that you are currently on that branch.</p> <h2 id="4-make-changes">4. Make changes</h2> <p>Now you can make changes to the files in the project. Here, we just have a <code class="language-plaintext highlighter-rouge">README.md</code> file. You can edit it and add this sentence to the end of the file:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">-</span> This line was added by <span class="p">[</span><span class="nv">&lt;Your Name Here&gt;</span><span class="p">](</span><span class="sx">https://github.com/</span><span class="nt">&lt;your-username&gt;</span>).
</code></pre></div></div> <p>Make sure to replace <code class="language-plaintext highlighter-rouge">&lt;Your Name Here&gt;</code> with your name and <code class="language-plaintext highlighter-rouge">&lt;your-username&gt;</code> with your GitHub username!</p> <h2 id="5-commit-your-changes">5. Commit your changes</h2> <p>Committing your changes is crucial to save the current state of your project.</p> <p>You can check the current state of your project by running:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git status
</code></pre></div></div> <p>This tells us which files have changes that are not committed yet. The output would be something like:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>On branch learning-about-prs
Changes not staged for commit:
  (use "git add &lt;file&gt;..." to update what will be committed)
  (use "git restore &lt;file&gt;..." to discard changes in working directory)
	modified:   README.md
</code></pre></div></div> <p>Now, we can prepare the README.md file to be committed. Files that have finalized changes and are ready to be committed are moved to the staging area. Git only commited files that are staged, which provides us even more flexibility.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git add <span class="nb">.</span>
</code></pre></div></div> <p>This adds all the changed files to the staging area. Optionally you can handpick files to be added.</p> <p>Now, you can make a commit by running this command in your terminal:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git commit <span class="nt">-m</span> <span class="s2">"&lt;Commit Message&gt;"</span>
</code></pre></div></div> <p>Here <code class="language-plaintext highlighter-rouge">-m</code> flag lets us add a message to our commit. This message is helpful for other people viewing change history of the project. Replace <code class="language-plaintext highlighter-rouge">&lt;Commit Message&gt;</code> with a short summary of the changes you made. For example: “Added a new line to the README.md file”.</p> <h2 id="6-push-changes-to-your-fork">6. Push changes to your fork</h2> <p>Now that you have committed the file locally, you need to send this file over to your fork present on GitHub.</p> <p><strong>NOTE</strong>: GitHub doesn’t automatically know about your commits made locally. You need to push the commits yourself.</p> <p>Since you have made changes to <code class="language-plaintext highlighter-rouge">learning-about-prs</code>, you can push them to GitHub with this command:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git push <span class="nt">-u</span> origin learning-about-prs
</code></pre></div></div> <p>Here we are asking git to <code class="language-plaintext highlighter-rouge">push</code> our changes to the branch <code class="language-plaintext highlighter-rouge">learning-about-prs</code> on the <code class="language-plaintext highlighter-rouge">origin</code> present on GitHub (your fork).</p> <p><code class="language-plaintext highlighter-rouge">-u</code> sets the upstream for current branch so that you don’t have to type <code class="language-plaintext highlighter-rouge">origin learning-about-prs</code> everytime. From the next time, even if you type <code class="language-plaintext highlighter-rouge">git push</code> it will push to <code class="language-plaintext highlighter-rouge">learning-about-prs</code> branch on GitHub.</p> <blockquote> <h3 id="additional-note">Additional Note:</h3> <p>Here, <code class="language-plaintext highlighter-rouge">origin</code> is linked to your fork. You can verify it by running this command in your terminal: <br/><br/></p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git remote <span class="nt">-v</span>
</code></pre></div> </div> <p>This should show the <code class="language-plaintext highlighter-rouge">push</code> and <code class="language-plaintext highlighter-rouge">fetch</code> links which point to your fork. <br/><br/> If you change these links by using <code class="language-plaintext highlighter-rouge">git remote rm origin</code> and <code class="language-plaintext highlighter-rouge">git remote add origin &lt;new-link&gt;</code>, the commits will be sent to new remote then!</p> </blockquote> <h2 id="7-make-the-pr">7. Make the PR</h2> <p>Once you push your changes to GitHub, open the fork on GitHub. You will be able to see a a notification regarding the new commits to <code class="language-plaintext highlighter-rouge">learning-about-prs</code> branch.</p> <p><img src="https://user-images.githubusercontent.com/46792249/161416102-4e803e63-f22c-4125-a5dd-38ee7c07bbc3.png" alt="Branch had recent pushes, Compare and pull request"/></p> <p>Press the <code class="language-plaintext highlighter-rouge">Compare and pull request</code> button and you will be presented with an interface to create a pull request.</p> <p>Enter the appropriate <strong>Title</strong> and <strong>Comment</strong> to our PR. This helps the reviewers know what changes you are making to the repository.</p> <p>Once you are done with adding the metadata to the PR, go ahead and press the “<strong>Create Pull Request</strong>” button.</p> <p>Congratulations 🥳</p> <p>You’ve successfully made a Pull Request to a repository on GitHub!</p> <p>Using these steps you can create a Pull Request to any repository on GitHub!</p> <h2 id="optional-useful-information">(Optional) Useful Information</h2> <h3 id="i-forgot-to-make-some-required-changes-but-made-a-pr-do-i-have-to-make-a-new-one-now">I forgot to make some required changes but made a PR, do I have to make a new one now?</h3> <p>Absolutely no! GitHub is smart enough to handle this. <strong>You can’t create more than one PR from a single branch</strong>. This means that you can add more commits to the current branch and as soon as you push them, they will automatically go to the existing PR.</p> <p>Just add as many commits you want, to the branch and use <code class="language-plaintext highlighter-rouge">git push</code>. That will send the commits to the existing PR, avoiding the need to create a new one from scratch!</p> <h3 id="why-do-we-create-a-new-branch-in-the-first-place">Why do we create a new branch in the first place?</h3> <p>There are quite a few reasons to it. The main one being it maintains a separation of concerns. One can work on different features at the same time without affecting existing working code.</p> <p>This also helps teams to assign different features to different people and collaborate on different parts of projects in realtime.</p> <p>Another reason is, once the reviewers approve and merge your changes, it adds a new commit to the original repository.</p> <p>Now your fork would get left behind because it doesn’t automatically pull new changes from the original source.</p> <p>GitHub provides us with <strong>Fetch upstream</strong> button to keep our fork in sync with the remote repository.</p> <p><img src="https://user-images.githubusercontent.com/46792249/161415987-2c9160b0-9f14-4ee6-b569-16c900b26950.png" alt="Fetch upstream button on GitHub" width="60%"/></p> <p>Pressing <strong>Fetch and merge</strong> gets changes from the original repository to our fork allowing us to keep the fork up to date.</p> <p>If we had made changes directly to the main branch, it could cause merge conflicts as our fork would have different commits than the original repository.</p> <p>Also, this could pollute the new PRs with old commits if the main branch of the fork isn’t kept up to date with the original repository.</p> <h3 id="what-is-a-good-place-to-start-with-open-source">What is a good place to start with open source?</h3> <p>Genics Blog is an <a href="https://github.com/genicsblog">open source</a> developer publication where we do a lot of open source work. We are a high school student run organization. Join our <a href="https://discord.genicsblog.com">community on Discord</a> to learn about opportunities from experienced developers and get involved!</p> <h2 id="further-resources">Further Resources</h2> <p>Check out this video where I use the steps taught here to create a PR to the <a href="https://github.com/genicsblog/theme-files"><code class="language-plaintext highlighter-rouge">theme-files</code></a> repository for <a href="/">Genics Blog</a> on GitHub:</p> <div class="mb-6 aspect-video"> <iframe src="https://www.youtube.com/embed/wHxlA0p1AbM" class="w-full h-full rounded-xl" allowfullscreen="" loading="lazy"> </iframe> </div> <h2 id="conclusion">Conclusion</h2> <p>This was a long but to the point guide to create Pull Requests on GitHub which can help you to contribute to open source projects on GitHub.</p> <p>If you find this guide helpful, or have any related questions feel free to comment or <a href="https://discord.genicsblog.com">join our discord</a> to get help.</p> <p>Share this article with people who are new to open source world!</p>]]></content><author><name>Gourav Khunger</name></author><category term="coding"/><category term="open-source"/><category term="beginners"/><category term="tips"/><summary type="html"><![CDATA[Guide that teaches you how to fork a GitHub repository, make changes and create pull requests in the correct way.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://user-images.githubusercontent.com/46792249/161420369-eb87073e-b49c-462e-84bf-57c442839eb3.png"/><media:content medium="image" url="https://user-images.githubusercontent.com/46792249/161420369-eb87073e-b49c-462e-84bf-57c442839eb3.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">How to sort imports for a JavaScript Project using Prettier</title><link href="https://genicsblog.com/usman/how-to-sort-imports-for-a-javascript-project-using-prettier" rel="alternate" type="text/html" title="How to sort imports for a JavaScript Project using Prettier"/><published>2022-03-29T00:00:00+00:00</published><updated>2022-03-29T00:00:00+00:00</updated><id>https://genicsblog.com/usman/sort-imports-using-prettier-in-a-javascript-project-inside-vs-code</id><content type="html" xml:base="https://genicsblog.com/usman/how-to-sort-imports-for-a-javascript-project-using-prettier"><![CDATA[<p>Hey developers!</p> <p>This post is about how you can sort import statements in your JavaScript projects easily with Prettier in VS Code when you format the code.</p> <div class="mb-6 aspect-video"> <iframe src="https://www.youtube.com/embed/QQWgN0_gUxI" class="w-full h-full rounded-xl" allowfullscreen="" loading="lazy"> </iframe> </div> <h2 id="what-will-you-achieve">What will you achieve?</h2> <p>By default, we import other files and libraries in an unformatted way. With Prettier and one of it’s community plugins, we can easily configure it to sort import statements the way we want them automatically whenever we format code inside VS Code.</p> <h3 id="before">Before</h3> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1647944153303/suNfQ7Fnf.png" alt="image.png"/></p> <h3 id="after">After</h3> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1647944178892/mAd4GSyrY.png" alt="image.png"/></p> <h2 id="installation--configuration">Installation &amp; Configuration</h2> <p>In your JavaScript project, first of all you have to install and configure Prettier, you can do that easily by installing <code class="language-plaintext highlighter-rouge">prettier</code> as a dev dependency by running this command.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm <span class="nb">install </span>prettier <span class="nt">-D</span>
</code></pre></div></div> <p>After installing Prettier, we’ll create a configuration file at the root of your project called <code class="language-plaintext highlighter-rouge">.prettierrc</code>. In that file, you can write JSON to configure prettier fitting to your needs. This is my configuration.</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"trailingComma"</span><span class="p">:</span><span class="w"> </span><span class="s2">"none"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"arrowParens"</span><span class="p">:</span><span class="w"> </span><span class="s2">"avoid"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"singleQuote"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
  </span><span class="nl">"printWidth"</span><span class="p">:</span><span class="w"> </span><span class="mi">80</span><span class="p">,</span><span class="w">
  </span><span class="nl">"useTabs"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
  </span><span class="nl">"tabWidth"</span><span class="p">:</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w">
  </span><span class="nl">"semi"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>Now whenever you format code, Prettier will format it according to your configuration. Next up, we have to install the plugin we are going to use to sort imports.</p> <p>You can install it as a dev dependency simply by running this command</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm <span class="nb">install</span> @trivago/prettier-plugin-sort-imports <span class="nt">-D</span>
</code></pre></div></div> <div class="text-center mb-6"> <a class="px-3 py-1 font-bold hover:shadow-lg rounded-md bg-black dark:bg-slate-100 dark:text-black text-white text-lg hover:scale-110 transition underline-none" href="https://www.npmjs.com/package/@trivago/prettier-plugin-sort-imports" target="_blank" rel="nofollow noreferrer noopener"> View on NPM &gt; </a> </div> <h2 id="sorting-settings">Sorting Settings</h2> <p>Once the plugin is installed, you can look around in their documentation on the NPM page, but we are going to keep it simple.</p> <p>The basic setup is to add 3 options in your prettier config file. <code class="language-plaintext highlighter-rouge">importOrder</code>, <code class="language-plaintext highlighter-rouge">importOrderSeparation</code> and <code class="language-plaintext highlighter-rouge">importOrderSortSpecifiers</code> as follows:</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"importOrder"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"ARRAY OF IMPORT NAMES"</span><span class="p">],</span><span class="w">
  </span><span class="nl">"importOrderSeparation"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
  </span><span class="nl">"importOrderSortSpecifiers"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>The main option in these is the <code class="language-plaintext highlighter-rouge">importOrder</code> option, in this option, you have to create an array of imports as you want to sort them. In my case, I wanted imports in this order:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">next</span><span class="dl">'</span> <span class="c1">// "next" imports at the top</span>

<span class="k">import</span> <span class="p">{}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">other-lib</span><span class="dl">'</span>

<span class="k">import</span> <span class="nx">config</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">next-seo.config</span><span class="dl">'</span> <span class="c1">// A single file</span>

<span class="k">import</span> <span class="nx">Component</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">components/Component</span><span class="dl">'</span>

<span class="k">import</span> <span class="nx">helperFunction</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">utils/helperFunction</span><span class="dl">'</span>

<span class="k">import</span> <span class="p">{}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">assets/file</span><span class="dl">'</span>

<span class="k">import</span> <span class="dl">'</span><span class="s1">@fontsource/font</span><span class="dl">'</span>

<span class="k">import</span> <span class="dl">'</span><span class="s1">others.css</span><span class="dl">'</span>
</code></pre></div></div> <p>To configure this type of order, in the <code class="language-plaintext highlighter-rouge">importOrder</code> option, you have to pass an array of <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions">regular expressions</a>.</p> <p>My configuration is like this:</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"trailingComma"</span><span class="p">:</span><span class="w"> </span><span class="s2">"none"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"arrowParens"</span><span class="p">:</span><span class="w"> </span><span class="s2">"avoid"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"singleQuote"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
  </span><span class="nl">"printWidth"</span><span class="p">:</span><span class="w"> </span><span class="mi">80</span><span class="p">,</span><span class="w">
  </span><span class="nl">"useTabs"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
  </span><span class="nl">"tabWidth"</span><span class="p">:</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w">
  </span><span class="nl">"semi"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
  </span><span class="nl">"importOrder"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="s2">"^(next/(.*)$)|^(next$)"</span><span class="p">,</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">Imports</span><span class="w"> </span><span class="err">by</span><span class="w"> </span><span class="s2">"next"</span><span class="w">
    </span><span class="s2">"&lt;THIRD_PARTY_MODULES&gt;"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"next-seo.config"</span><span class="p">,</span><span class="w"> 
    </span><span class="s2">"^components/(.*)$"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"^utils/(.*)$"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"^assets/(.*)$"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"^@fontsource/(.*)$"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"^[./]"</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">Other</span><span class="w"> </span><span class="err">imports</span><span class="w">
  </span><span class="p">],</span><span class="w">
  </span><span class="nl">"importOrderSeparation"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
  </span><span class="nl">"importOrderSortSpecifiers"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>Here, <code class="language-plaintext highlighter-rouge">&lt;THIRD_PARTY_MODULES&gt;</code> is provided by the plugin itself to place any other libraries in between. By default all third party modules will move at the top.</p> <p>Now, you can go ahead and enable <strong>Format on Save</strong> setting inside VS Code to format code on save and install the Prettier extension too for the same.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1647945251114/dFOBreRKV.png" alt="image.png"/></p> <h2 id="format-script">Format script</h2> <p>A quick way to format all the files is by going into your <code class="language-plaintext highlighter-rouge">package.json</code> file and adding a script to it like this:</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">"scripts"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="nl">"format"</span><span class="p">:</span><span class="w"> </span><span class="s2">"prettier --write </span><span class="se">\"</span><span class="s2">./**/*.{ts,tsx,json}</span><span class="se">\"</span><span class="s2">"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>You can refer to Prettier’s <a href="https://prettier.io/docs/en/cli.html">CLI documentation</a> for more information.</p> <p>It’s better to ignore some files and folders so that they don’t get formatted as well by Prettier, for that you can create a <code class="language-plaintext highlighter-rouge">.prettierignore</code> file in the root of your project and you can simply name the files and folders you don’t want to format. Just like <code class="language-plaintext highlighter-rouge">.gitignore</code>.</p> <p>This is my <code class="language-plaintext highlighter-rouge">.prettierignore</code> file:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.next
node_modules
*-lock.json      # package-lock.json
</code></pre></div></div> <p>Then you can run the <code class="language-plaintext highlighter-rouge">npm run format</code> command in your terminal and it will format all the required files in your project as per your configuration.</p> <p>I hope this post helped you make your code look more clean and elegant and readable. If it did, please leave a like!</p> <p>Comment down your thoughts! There is always room for improvement so let me know your suggestions on this project!</p> <p><strong>Connect with me on my <a href="https://youtube.com/MaxProgramming">YouTube channel</a> and my <a href="https://twitter.com/maxprogramming1">Twitter</a> 😉</strong></p> <p>Thanks for reading!</p>]]></content><author><name>Usman Sabuwala</name></author><category term="coding"/><category term="libraries"/><category term="tools"/><category term="tips"/><summary type="html"><![CDATA[Make your code clean, structured and look better by sorting import statements automatically using the prettier plugin for VS Code]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://cdn.hashnode.com/res/hashnode/image/upload/v1647939834412/-rOHcxwbV.png"/><media:content medium="image" url="https://cdn.hashnode.com/res/hashnode/image/upload/v1647939834412/-rOHcxwbV.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">5 Chrome Keyboard Shortcuts to boost your productivity</title><link href="https://genicsblog.com/anishde12020/5-chrome-keyboard-shortcuts-to-boost-your-productivity" rel="alternate" type="text/html" title="5 Chrome Keyboard Shortcuts to boost your productivity"/><published>2022-03-25T00:00:00+00:00</published><updated>2022-03-25T00:00:00+00:00</updated><id>https://genicsblog.com/anishde12020/5-chrome-keyboard-shortcuts-to-boost-your-productivity</id><content type="html" xml:base="https://genicsblog.com/anishde12020/5-chrome-keyboard-shortcuts-to-boost-your-productivity"><![CDATA[<p>Browsers have become an integral part of our life and most applications are web-based now. Web browsers are used for everything, from asking a question on Stackoverflow to booking a flight ticket.</p> <p>We often end up having a huge number of tabs open and it becomes quite hard to keep a track of them. It gets especially confusing when we try to switch between tabs. Let us look at 5 keyboard shortcuts that can boost our productivity!</p> <p><strong>Note</strong>: Although I am going to be talking about keyboard shortcuts specific to Chrome, they should remain the same across all Chromium-based browsers (Brave, Edge, Vivaldi, etc.)</p> <h2 id="moving-between-tabs">Moving between tabs</h2> <p>Clicking tabs can be quite a painful and slow process, especially, if you switch between them frequently. Keyboard shortcuts greatly speed things up here.</p> <p><code class="language-plaintext highlighter-rouge">Ctrl</code> + <code class="language-plaintext highlighter-rouge">Tab</code> (for Windows) and <code class="language-plaintext highlighter-rouge">⌘</code> + <code class="language-plaintext highlighter-rouge">⌥</code> + <code class="language-plaintext highlighter-rouge">→</code> (for macOS) lets you move to the next tab.</p> <p>Edit: <code class="language-plaintext highlighter-rouge">Ctrl</code> + <code class="language-plaintext highlighter-rouge">Tab</code> works on macOS too, kudos to @<a href="/author/dhruva">Dhruva Srinivas</a> for pointing it out</p> <p>Bonus: We can also move to the previous tab with <code class="language-plaintext highlighter-rouge">Ctrl</code> + <code class="language-plaintext highlighter-rouge">Shift</code> + <code class="language-plaintext highlighter-rouge">Tab</code> (for Windows and macOS) and <code class="language-plaintext highlighter-rouge">⌘</code> + <code class="language-plaintext highlighter-rouge">⌥</code> + <code class="language-plaintext highlighter-rouge">←</code> (for macOS).</p> <h2 id="re-opening-closed-tabs">Re-opening closed tabs</h2> <p>We tend to close tabs by mistake but there is a simple keyboard shortcut that can re-open the last closed tab:</p> <p><code class="language-plaintext highlighter-rouge">Ctrl</code> + <code class="language-plaintext highlighter-rouge">Shift</code> + <code class="language-plaintext highlighter-rouge">T</code> (for Windows) and <code class="language-plaintext highlighter-rouge">⌘</code> + <code class="language-plaintext highlighter-rouge">Shift</code> + <code class="language-plaintext highlighter-rouge">T</code> (for macOS) lets you re-open recently closed tabs in the order they were closed in.</p> <p>Bonus: If you close a whole window, the above keyboard shortcut will re-open the whole window with all the tabs!</p> <h2 id="searching-through-open-tabs">Searching through open tabs</h2> <p>As the number of tabs open gets larger and larger, it gets difficult to find a tab. Fortunately, from Chrome version 87 onwards, we can search through all open tabs as well as recently closed tabs.</p> <p><code class="language-plaintext highlighter-rouge">Ctrl</code> + <code class="language-plaintext highlighter-rouge">Shift</code> + <code class="language-plaintext highlighter-rouge">A</code> (for Windows) and <code class="language-plaintext highlighter-rouge">⌘</code> + <code class="language-plaintext highlighter-rouge">Shift</code> + <code class="language-plaintext highlighter-rouge">A</code> (for macOS) opens the tab search dialog.</p> <h2 id="close-the-current-tab">Close the current tab</h2> <p>After we are done with using a web page on a tab, it is a good idea to close it so that it doesn’t clutter our tab bar and keeps the resource usage low.</p> <p><code class="language-plaintext highlighter-rouge">Ctrl</code> + <code class="language-plaintext highlighter-rouge">W</code> (for Windows) and <code class="language-plaintext highlighter-rouge">⌘</code> + <code class="language-plaintext highlighter-rouge">W</code> (for macOS) closes the current tab.</p> <p>Bonus: <code class="language-plaintext highlighter-rouge">Ctrl</code> + <code class="language-plaintext highlighter-rouge">Shift</code> + <code class="language-plaintext highlighter-rouge">W</code> (for Windows) and <code class="language-plaintext highlighter-rouge">⌘</code> + <code class="language-plaintext highlighter-rouge">Shift</code> + <code class="language-plaintext highlighter-rouge">W</code> (for macOS) closes the current window.</p> <h2 id="open-a-new-tab-or-a-window">Open a new tab or a window</h2> <p><code class="language-plaintext highlighter-rouge">Ctrl</code> + <code class="language-plaintext highlighter-rouge">T</code> (for Windows) and <code class="language-plaintext highlighter-rouge">⌘</code> + <code class="language-plaintext highlighter-rouge">T</code> (for macOS) opens a new tab and jumps to it.</p> <p>Similarly, <code class="language-plaintext highlighter-rouge">Ctrl</code> + <code class="language-plaintext highlighter-rouge">N</code> (for Windows) and <code class="language-plaintext highlighter-rouge">⌘</code> + <code class="language-plaintext highlighter-rouge">N</code> (for macOS) opens a new window and jumps to it.</p> <p>Read more on all <a href="https://support.google.com/chrome/answer/157179?hl=en&amp;co=GENIE.Platform%3DDesktop">Keyboard Shortcuts</a> on Chrome.</p> <h2 id="conclusion">Conclusion</h2> <p>I hope you have found this small article helpful and now you can be more productive while browsing the web. See you in the next one 🤞</p>]]></content><author><name>Anish De</name></author><category term="web"/><category term="productivity"/><category term="tips"/><summary type="html"><![CDATA[5 Keyboard shortcuts for Chromium based browsers to boost your productivity while browsing the web.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://user-images.githubusercontent.com/46792249/160228326-defd39cc-f9b1-4b3a-b9c8-193c754dda2a.png"/><media:content medium="image" url="https://user-images.githubusercontent.com/46792249/160228326-defd39cc-f9b1-4b3a-b9c8-193c754dda2a.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">8 No Brainer Ways to Keep Your Heroku App Awake</title><link href="https://genicsblog.com/gouravkhunger/8-ways-to-keep-your-heroku-app-awake" rel="alternate" type="text/html" title="8 No Brainer Ways to Keep Your Heroku App Awake"/><published>2022-03-17T00:00:00+00:00</published><updated>2022-03-17T00:00:00+00:00</updated><id>https://genicsblog.com/gouravkhunger/8-ways-to-keep-your-heroku-app-awake</id><content type="html" xml:base="https://genicsblog.com/gouravkhunger/8-ways-to-keep-your-heroku-app-awake"><![CDATA[<p>Heroku is one of the easiest ways to quickly get your applications up and running on the web!</p> <p>And what’s so good about it? Heroku’s free plan is pretty generous. Although it gives you just 550 hours of free hosting a month, it can be extended to a solid 1000 by verifying yourself by adding a credit card.</p> <p>The only major issue with its free plan is that if your web app has not received any traffic for 30 minutes, it will auto shut your app :(</p> <p>The next requests that your app receives would restart the application, but it takes 7-8 seconds to restart the server which the app is hosted on. This means that if you app went to sleep, the user would have to wait for the app to wake up again, which surely does not provide a good UX.</p> <p>If you are struggling to keep your app awake, don’t worry. I’ve got you!</p> <p>Here are 8 ways to keep your Heroku app awake:</p> <ul> <li>Using a combination of <code class="language-plaintext highlighter-rouge">setInterval()</code> and <code class="language-plaintext highlighter-rouge">http.get()</code> functions.</li> <li>Using <code class="language-plaintext highlighter-rouge">node-cron</code> to ping your Heroku app.</li> <li>Using Kaffeine to ping your Heroku app.</li> <li>Pinging your app using Pingdom.</li> <li>With the <code class="language-plaintext highlighter-rouge">heroku-keep-awake</code> npm package.</li> <li>Configuring Newrelic addon to ping your Heroku app.</li> <li>Using other services like Uptime Robot to ping the app so it never sleeps.</li> <li>Scale up your Heroku app to hobby plan for just $7/month.</li> </ul> <p>Let’s dive into how to use these tools! For this tutorial we’ll assume we have a Heroku application hosted at example.herokuapp.com.</p> <h2 id="1-using-setinterval-and-httpget-functions">1. Using setInterval() and http.get() functions</h2> <p>This is by far the easiest way to keep your Heroku app awake without using any third party tools. <code class="language-plaintext highlighter-rouge">setInterval()</code> and <code class="language-plaintext highlighter-rouge">http.get()</code> functions are inbuilt into Node.js!</p> <p>Here’s how you can use these functions to your advantage:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">http</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">http</span><span class="dl">'</span><span class="p">);</span>

<span class="nx">setInterval</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">http</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">"</span><span class="s2">http://example.herokuapp.com</span><span class="dl">"</span><span class="p">);</span>
<span class="p">},</span> <span class="mi">25</span> <span class="o">*</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">);</span> <span class="c1">// every 25 minutes</span>
</code></pre></div></div> <p>Place this code inside your main <code class="language-plaintext highlighter-rouge">index.js</code> file, which is responsible to start your server/app. This will make sure to ping the application with a <code class="language-plaintext highlighter-rouge">GET</code> request every 25 minutes, which will simulate traffic to your application before 30 minutes of inactivity and thus keep your application awake!</p> <h2 id="2-using-node-cron">2. Using node-cron</h2> <p><a href="https://github.com/node-cron/node-cron"><code class="language-plaintext highlighter-rouge">node-cron</code></a> is a package that let’s you easily schedule cron jobs to perform tasks at specific intervals set by cron expressions. You can use this package to your advantage to keep your Heroku app awake!</p> <p>Let’s say you are already working with <a href="https://github.com/axios/axios"><code class="language-plaintext highlighter-rouge">axios</code></a> in your application, using it along with node-cron is as simple as:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">axios</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">axios</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">cron</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">node-cron</span><span class="dl">'</span><span class="p">);</span>

<span class="nx">cron</span><span class="p">.</span><span class="nx">schedule</span><span class="p">(</span><span class="dl">'</span><span class="s1">*/25 * * * *</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">axios</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">example.herokuapp.com</span><span class="dl">'</span><span class="p">);</span>
<span class="p">})</span>
</code></pre></div></div> <p>The expression <code class="language-plaintext highlighter-rouge">*/25 * * * *</code> means every 25 minutes of any hour/day/month. This will run the axios get command to ping your app every 25 minutes.</p> <h2 id="3-using-kaffeine">3. Using Kaffeine</h2> <p>I am pretty sure you have heard of <a href="https://kaffeine.herokuapp.com">Kaffeine</a> a lot. It is one of the most popular tool to ping your Heroku app.</p> <p><img src="https://user-images.githubusercontent.com/46792249/158734348-13cb4a84-34a6-4ab1-add7-9a581b76b636.png" alt="Screenshot of Kaffeine tool that pings your Heroku app every 30 minutes" class="aspect-video w-full"/></p> <p>Basically, it is a tool with a database of Heroku apps. Every 30 minutes, it goes through the list of stored apps and pings them. This is an easy way to ping your app without any manual work involved.</p> <p>But a major problem with Kaffeine is it has a big database of sites to ping (79406 as of now). This essentially means that it can be slow to iterate through the list. Even being some seconds later than 30 minutes can make your Heroku app go to sleep mode.</p> <p>With some testing I have found that you can expect to see your app restart about 7-8 times a day, even while using Kaffeine, but this basically defies the purpose of keep the app awake 24/7. It is recommended to use the manual ping methods listed above.</p> <h2 id="4-pingdom">4. Pingdom</h2> <p><a href="https://www.pingdom.com">Pingdom</a> is a easy to use analysing and monitoring tool for your website. In the process of monitoring your site for uptime, it will ping your Heroku site which will keep it awake!</p> <h2 id="5-use-heroku-keep-awake-npm-package">5. Use Heroku-keep-awake npm package.</h2> <p><code class="language-plaintext highlighter-rouge">Heroku-keep-awake</code> is a lightweight <a href="https://www.npmjs.com/package/heroku-keep-awake">npm package</a> that built specially to help you keep your apps alive.</p> <p><a href="https://github.com/colbymillerdev/heroku-keep-awake/blob/develop/index.js">Internally</a>, it uses <a href="https://github.com/moment/moment">moment.js</a> and <a href="https://github.com/node-fetch/node-fetch">node-fetch</a> to simulate traffic to your application.</p> <p>You can install it with:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm i heroku-keep-awake
</code></pre></div></div> <p>Using it is as simple as:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">express</span><span class="dl">'</span><span class="p">);</span>

<span class="c1">// wakeDyno for pinging single dyno</span>
<span class="c1">// wakeDynos for pinging multiple dynos</span>
<span class="kd">const</span> <span class="p">{</span> <span class="nx">wakeDyno</span><span class="p">,</span> <span class="nx">wakeDynos</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">heroku-keep-awake</span><span class="dl">'</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">DYNO_URL</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">https://example.herokuapp.com</span><span class="dl">'</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">DYNO_URLS</span> <span class="o">=</span> <span class="p">[</span><span class="dl">'</span><span class="s1">https://example.herokuapp.com</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">https://another-example.herokuapp.com</span><span class="dl">'</span><span class="p">]</span>

<span class="kd">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">PORT</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">wakeDyno</span><span class="p">(</span><span class="nx">DYNO_URL</span><span class="p">);</span> <span class="c1">// Pass a single dyno url string to keep it awake</span>

    <span class="nx">wakeDynos</span><span class="p">(</span><span class="nx">DYNO_URLS</span><span class="p">);</span> <span class="c1">// Pass an array of Dynos to keep awake</span>
<span class="p">})</span>
</code></pre></div></div> <h2 id="6-setup-new-relic-apm-plugin-for-heroku">6. Setup New Relic APM plugin for Heroku</h2> <p>Heroku supports a wide set of addons, one of which is <a href="https://elements.heroku.com/addons/newrelic">New Relic</a>. It offers features such as:</p> <ul> <li>Monitoring critical transactions across your website.</li> <li>Ensure the backend server apps are never the bottleneck for server issues.</li> <li>Dashboard to track everything.</li> <li>Analyze front-end and back-end applications to identify the root cause of performance issues.</li> </ul> <p>and a lot more.</p> <p>You can set up a free version to monitor your application. In the process of monitoring your application, it will ping your application which will keep it alive!</p> <h2 id="7-uptime-robot">7. Uptime Robot</h2> <p><a href="https://uptimerobot.com">Uptime Robot</a> is yet another free and flexible website monitoring tool, whose free plan can help you monitor HTTP security, response times, ports, keywords and a lot more.</p> <p>It does it in the same way, by pinging the site to get the details. When it pings your Heroku app, it simulates traffic to it, which will keep it awake!</p> <h2 id="8-get-a-hobby-dyno-to-avoid-the-mess">8. Get a Hobby dyno to avoid the mess</h2> <p>If you actually like Heroku as a service I’ll recommend you to actually upgrade your dyno plan to Hobby, which is just $7/month. That gives you the option to keep your app awake 24/7 out of the box.</p> <p>Not only does it keep the dyno awake 24/7, it gives you more features like:</p> <ul> <li>Free SSL certificates for your sites.</li> <li>Automatic certificate management.</li> <li>Dynos that never sleep.</li> </ul> <p>To know more about Heroku’s pricing, please visit their <a href="https://www.heroku.com/pricing">pricing page</a>.</p> <h2 id="conclusion">Conclusion</h2> <p>This was it for the list of 8 ways you could keep your Heroku apps awake 24/7.</p> <p>I personally recommend you to go either with <code class="language-plaintext highlighter-rouge">setInterval()</code> way (because of no 3rd party interference), or with <code class="language-plaintext highlighter-rouge">node-cron</code> (using open source tools) as both of them give you the control on how you ping the app.</p> <p>So, what tools/hacks are you actually using to achieve this task? Let me know in the comments below! Do you need help with programming? Join <a href="https://discord.genicsblog.com">our discord server</a>!</p> <p><a href="https://github.com/gouravkhunger">Let’s get in touch</a>.</p>]]></content><author><name>Gourav Khunger</name></author><category term="web"/><category term="web-development"/><category term="tools"/><summary type="html"><![CDATA[Compilation of the easiest ways to keep your free Heroku dyno running 24/7.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://user-images.githubusercontent.com/46792249/158544648-96aac1a5-d4dc-4f55-adff-d0479f6f447f.png"/><media:content medium="image" url="https://user-images.githubusercontent.com/46792249/158544648-96aac1a5-d4dc-4f55-adff-d0479f6f447f.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">A newbie’s cheatsheet for Javascript</title><link href="https://genicsblog.com/abhiraj/the-javascript-cheatsheet-for-new-coders" rel="alternate" type="text/html" title="A newbie’s cheatsheet for Javascript"/><published>2022-03-14T00:00:00+00:00</published><updated>2022-03-14T00:00:00+00:00</updated><id>https://genicsblog.com/abhiraj/the-javascript-cheatsheet-for-new-coders</id><content type="html" xml:base="https://genicsblog.com/abhiraj/the-javascript-cheatsheet-for-new-coders"><![CDATA[<p>JavaScript forms the foundation of almost everything you see on the web. So, with web development on the rise in 2022 and it being the base of thousands of popular frameworks, it’s a good language to learn!</p> <p>This is the ultimate beginner cheatsheet for Javascript. It’s a collection of useful snippets and tips to help you get started with Javascript.</p> <h2 id="basics">Basics</h2> <h3 id="1-include-js-code-in-a-html-page">1. Include JS code in a HTML page</h3> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">"text/javascript"</span><span class="nt">&gt;</span>

<span class="c1">//JS code here</span>

<span class="nt">&lt;/script&gt;</span>
</code></pre></div></div> <h3 id="2-call-an-external-js-file">2. Call an external JS file</h3> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"thematrix.js"</span><span class="nt">&gt;</span>
<span class="nt">&lt;/script&gt;</span> 
</code></pre></div></div> <h3 id="3-include-comments">3. Include comments</h3> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Single line comment</span>
</code></pre></div></div> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/*
Multi line comment
*/</span>
</code></pre></div></div> <h2 id="data-types">Data types</h2> <h3 id="1-numbers">1. Numbers</h3> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">age</span> <span class="o">=</span> <span class="mi">23</span>
</code></pre></div></div> <h3 id="2-variables">2. Variables</h3> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">x</span>
</code></pre></div></div> <h3 id="3-text-strings">3. Text strings</h3> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Hacker</span><span class="dl">"</span>
</code></pre></div></div> <h3 id="4-operations">4. Operations</h3> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">sum</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">+</span> <span class="mi">9</span>
</code></pre></div></div> <h3 id="5-truefalse-boolean">5. True/False (Boolean)</h3> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="kc">true</span>
</code></pre></div></div> <h3 id="6-constant-values">6. Constant Values</h3> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">420</span>
</code></pre></div></div> <h3 id="7-objects">7. Objects</h3> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">firstname</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Abhiraj</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">lastname</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Bhowmick</span><span class="dl">"</span>
<span class="p">}</span>
</code></pre></div></div> <h2 id="storing-data">Storing data</h2> <h3 id="1-var">1. <code class="language-plaintext highlighter-rouge">var</code></h3> <p>This is the most common way to store data. <code class="language-plaintext highlighter-rouge">var</code>s can be reassigned but can only be accessed inside a function.</p> <p>Variables defined with <code class="language-plaintext highlighter-rouge">var</code> move to top when code is executed.</p> <h3 id="2-const">2. <code class="language-plaintext highlighter-rouge">const</code></h3> <p><code class="language-plaintext highlighter-rouge">const</code> values cannot be reassigned and are not accessible before they appear within the code.</p> <h3 id="3-let">3. <code class="language-plaintext highlighter-rouge">let</code></h3> <p><code class="language-plaintext highlighter-rouge">let</code> is similar to <code class="language-plaintext highlighter-rouge">const</code> but let variable can be re-assigned but not re-declared</p> <h2 id="operators">Operators</h2> <h3 id="1-logical-operators">1. Logical Operators</h3> <p><code class="language-plaintext highlighter-rouge">&amp;&amp;</code> : logical and</p> <p><code class="language-plaintext highlighter-rouge">||</code> : logical or</p> <p><code class="language-plaintext highlighter-rouge">!</code> : logical not</p> <h3 id="2-arithmetic-operators">2. Arithmetic Operators</h3> <p><code class="language-plaintext highlighter-rouge">+</code> : Addition</p> <p><code class="language-plaintext highlighter-rouge">-</code> : Subtraction</p> <p><code class="language-plaintext highlighter-rouge">*</code> : Multiplication</p> <p><code class="language-plaintext highlighter-rouge">**</code> : Exponentiation (ES2016)</p> <p><code class="language-plaintext highlighter-rouge">/</code> : Division</p> <p><code class="language-plaintext highlighter-rouge">%</code> : Modulus (Division Remainder)</p> <p><code class="language-plaintext highlighter-rouge">++</code> : Increment</p> <p><code class="language-plaintext highlighter-rouge">--</code> : Decrement</p> <h3 id="3-comparison-operators">3. Comparison Operators</h3> <p><code class="language-plaintext highlighter-rouge">==</code> : equal to</p> <p><code class="language-plaintext highlighter-rouge">===</code> : equal value and equal type</p> <p><code class="language-plaintext highlighter-rouge">!=</code> : not equal</p> <p><code class="language-plaintext highlighter-rouge">!==</code> : not equal value or not equal type</p> <p><code class="language-plaintext highlighter-rouge">&gt;</code> : greater than</p> <p><code class="language-plaintext highlighter-rouge">&lt;</code> : less than</p> <p><code class="language-plaintext highlighter-rouge">&gt;=</code> : greater than or equal to</p> <p><code class="language-plaintext highlighter-rouge">&lt;=</code> : less than or equal to</p> <p><code class="language-plaintext highlighter-rouge">?</code> : ternary operator</p> <h3 id="4️-bitwise-operators">4️. Bitwise Operators</h3> <p><code class="language-plaintext highlighter-rouge">&amp;</code> : AND</p> <p><code class="language-plaintext highlighter-rouge">|</code> : OR</p> <p><code class="language-plaintext highlighter-rouge">~</code> : NOT</p> <p><code class="language-plaintext highlighter-rouge">^</code> : XOR</p> <p><code class="language-plaintext highlighter-rouge">&lt;&lt;</code> : Left shift</p> <p><code class="language-plaintext highlighter-rouge">&gt;&gt;</code> : Right shift</p> <p><code class="language-plaintext highlighter-rouge">&gt;&gt;&gt;</code> : Unsigned right shift</p> <h2 id="array-functions">Array Functions</h2> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">fruit</span> <span class="o">=</span> <span class="p">[</span><span class="dl">"</span><span class="s2">Apple</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Berries</span><span class="dl">"</span><span class="p">]</span>
</code></pre></div></div> <ol> <li> <p><code class="language-plaintext highlighter-rouge">concat()</code> : Join several arrays into one</p> </li> <li> <p><code class="language-plaintext highlighter-rouge">indexof()</code> : Returns the first position at which a given element appears in an array</p> </li> <li> <p><code class="language-plaintext highlighter-rouge">join()</code> : Combine elements of an array into a single string and return the string</p> </li> <li> <p><code class="language-plaintext highlighter-rouge">lastindexof()</code> : Gives the last position at which a given element appears in an array</p> </li> <li> <p><code class="language-plaintext highlighter-rouge">pop()</code> : Removes the last element of an array</p> </li> <li> <p><code class="language-plaintext highlighter-rouge">push()</code> : Add a new element at the end</p> </li> <li> <p><code class="language-plaintext highlighter-rouge">reverse()</code> : This method reverses the order of the array elements.</p> </li> <li> <p><code class="language-plaintext highlighter-rouge">sort()</code> : Sorts the array elements in a specified manner.</p> </li> <li> <p><code class="language-plaintext highlighter-rouge">toString()</code> : Converts the array elements to a string.</p> </li> <li> <p><code class="language-plaintext highlighter-rouge">valueOf()</code> : returns the relevant Number Object holding the value of the argument passed</p> </li> </ol> <h2 id="dates">Dates</h2> <p>Date object is used to get the year, month and day. It has methods to get and set day, month, year, hour, minute, and seconds.</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">getDate</span><span class="p">()</span> <span class="c1">// Returns the date from the date object</span>

<span class="nx">getDay</span><span class="p">()</span> <span class="c1">// Returns the day from the date object</span>

<span class="nx">getHours</span><span class="p">()</span> <span class="c1">// Returns the hours from the date object</span>

<span class="nx">getMinutes</span><span class="p">()</span> <span class="c1">// Returns the minutes from the date object</span>

<span class="nx">getSeconds</span><span class="p">()</span> <span class="c1">// Returns the seconds from the date object</span>

<span class="nx">getTime</span><span class="p">()</span> <span class="c1">// Returns the time from the date object</span>
</code></pre></div></div> <h2 id="input-device-events">Input Device Events</h2> <h3 id="mouse-events">Mouse Events</h3> <p>Any change in the state of an object is referred to as an Event. With the help of JS, you can handle events, i.e., how any specific HTML tag will work when the user does something.</p> <p><code class="language-plaintext highlighter-rouge">click</code></p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">element</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
<span class="c1">// Fired when an element is clicked</span>
<span class="p">});</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">oncontextmenu</code></p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">element</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">contextmenu</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
<span class="c1">// Fired when an element is right-clicked</span>
<span class="p">});</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">dblclick</code></p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">element</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">dblclick</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
<span class="c1">// Fired when an element is double-clicked</span>
<span class="p">});</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">mouseenter</code></p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">element</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">mouseenter</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
<span class="c1">// Fired when an element is entered by the mouse arrow</span>
<span class="p">});</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">mouseleave</code></p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">element</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">mouseleave</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
<span class="c1">// Fired when an element is exited by the mouse arrow</span>
<span class="p">});</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">mousemove</code></p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">element</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">mousemove</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
<span class="c1">// Fired when the mouse is moved inside the element</span>
<span class="p">});</span>
</code></pre></div></div> <h3 id="keyboard-events">Keyboard Events</h3> <p><code class="language-plaintext highlighter-rouge">keydown</code></p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">element</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">keydown</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
<span class="c1">// Fired when the user is pressing a key on the keyboard</span>
<span class="p">});</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">keypress</code></p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">element</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">keypress</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
<span class="c1">// Fired when the user presses the key on the keyboard</span>
<span class="p">});</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">keyup</code></p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">element</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">keyup</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
<span class="c1">// Fired when the user releases a key on the keyboard</span>
<span class="p">});</span>
</code></pre></div></div> <h3 id="thank-you-for-reading">Thank you for reading</h3> <p>If you liked this post, subscribe to my <a href="https://abhirajbhowmick.substack.com" rel="dofollow">newsletter</a> to never miss out on my blogs, product launches, and tech news, and follow me on <a href="https://twitter.com/rainboestrykr">Twitter</a> for daily threads on web dev resources!</p>]]></content><author><name>Abhiraj Bhowmick</name></author><category term="web"/><category term="web-development"/><category term="beginners"/><summary type="html"><![CDATA[This is the go-to super guide/cheatsheet for beginner coders learing Javascript]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://user-images.githubusercontent.com/46792249/158066053-34b1c462-70cb-4054-be5a-02a56d9df49c.png"/><media:content medium="image" url="https://user-images.githubusercontent.com/46792249/158066053-34b1c462-70cb-4054-be5a-02a56d9df49c.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">How to build CLIs with React Ink</title><link href="https://genicsblog.com/dhruva/building-clis-with-react-ink" rel="alternate" type="text/html" title="How to build CLIs with React Ink"/><published>2022-03-10T00:00:00+00:00</published><updated>2022-03-10T00:00:00+00:00</updated><id>https://genicsblog.com/dhruva/building-clis-with-react-ink</id><content type="html" xml:base="https://genicsblog.com/dhruva/building-clis-with-react-ink"><![CDATA[<p>Yes, dear reader, you read that right! You can build beautiful CLIs with React using an awesome library called <a href="https://github.com/vadimdemedes/ink">React Ink</a>!</p> <p>The way this library works is best summed up by the README of the repo:</p> <blockquote> <p>Ink provides the same component-based UI building experience that React offers in the browser, but for command-line apps. It uses <a href="https://github.com/facebook/yoga">Yoga</a> to build Flexbox layouts in the terminal, so most CSS-like props are available in Ink as well. If you are already familiar with React, you already know Ink. Since Ink is a React renderer, it means that all features of React are supported. Head over to <a href="https://reactjs.org/">React</a> website for documentation on how to use it. Only Ink’s methods will be documented in this readme.</p> </blockquote> <h1 id="what-well-build-️">What we’ll build 🗓️</h1> <p>In this post, we’ll explore how Ink works by building a cool little CLI, that fetches info about pokemon using <a href="https://pokeapi.co/">PokeAPI</a>!</p> <h1 id="creating-an-ink-project-">Creating an Ink project 🪜</h1> <p>This is extremely simple and straight-forward.</p> <ul> <li>First you will create an empty directory</li> </ul> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir </span>pokecli <span class="o">&amp;&amp;</span> <span class="nb">cd </span>pokecli
</code></pre></div></div> <ul> <li>Then you can run the <code class="language-plaintext highlighter-rouge">create-ink-app</code> command</li> </ul> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npx create-ink-app <span class="nt">--typescript</span>
</code></pre></div></div> <p>In this post, I will use TypeScript, but you can follow along with plain JS too.</p> <p>If we take a look at what this command has generated, we can see a very basic file structure:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pokecli
	source/
	.editorconfig
	.gitattributes
	package-lock.json
	package.json
	readme.md
	tsconfig.json
</code></pre></div></div> <p>We can ignore everything other than the <code class="language-plaintext highlighter-rouge">source</code> folder.</p> <p><code class="language-plaintext highlighter-rouge">source/ui.tsx</code></p> <div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">FC</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Text</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">ink</span><span class="dl">"</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">App</span><span class="p">:</span> <span class="nx">FC</span><span class="o">&lt;</span><span class="p">{</span> <span class="nx">name</span><span class="p">?:</span> <span class="kr">string</span> <span class="p">}</span><span class="o">&gt;</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">name</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Stranger</span><span class="dl">"</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">(</span>
  <span class="p">&lt;</span><span class="nc">Text</span><span class="p">&gt;</span>
    Hello, <span class="p">&lt;</span><span class="nc">Text</span> <span class="na">color</span><span class="p">=</span><span class="s">"green"</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">name</span><span class="si">}</span><span class="p">&lt;/</span><span class="nc">Text</span><span class="p">&gt;</span>
  <span class="p">&lt;/</span><span class="nc">Text</span><span class="p">&gt;</span>
<span class="p">);</span>
<span class="kr">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">App</span><span class="p">;</span>
<span class="k">export</span> <span class="k">default</span> <span class="nx">App</span><span class="p">;</span>
</code></pre></div></div> <p>This is a normal App component like you would see in plain React. A prop <code class="language-plaintext highlighter-rouge">name</code> is passed on to this component which is set to a default value of Stranger. And a message of “Hello, {name}” is rendered. Note that the <code class="language-plaintext highlighter-rouge">Text</code> component comes from <code class="language-plaintext highlighter-rouge">ink</code>.</p> <p>It can be used to style many aspects of the text, like the color, background color etc. <code class="language-plaintext highlighter-rouge">ink</code> uses a library called <a href="https://github.com/chalk/chalk">chalk</a> to do this.</p> <p><code class="language-plaintext highlighter-rouge">source/cli.tsx</code></p> <div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#!/usr/bin/env node
</span><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">render</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">ink</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">meow</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">meow</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">App</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./ui</span><span class="dl">"</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">cli</span> <span class="o">=</span> <span class="nx">meow</span><span class="p">(</span>
  <span class="s2">`
	Usage
	  $ pokecli
	Options
		--name  Your name
	Examples
	  $ pokecli --name=Jane
	  Hello, Jane
`</span><span class="p">,</span>
  <span class="p">{</span>
    <span class="na">flags</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">name</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">type</span><span class="p">:</span> <span class="dl">"</span><span class="s2">string</span><span class="dl">"</span><span class="p">,</span>
      <span class="p">},</span>
    <span class="p">},</span>
  <span class="p">}</span>
<span class="p">);</span>
<span class="nx">render</span><span class="p">(&lt;</span><span class="nc">App</span> <span class="na">name</span><span class="p">=</span><span class="si">{</span><span class="nx">cli</span><span class="p">.</span><span class="nx">flags</span><span class="p">.</span><span class="nx">name</span><span class="si">}</span> <span class="p">/&gt;);</span>
</code></pre></div></div> <p>This file is the entry point of the CLI application. The <code class="language-plaintext highlighter-rouge">meow</code> function displays the text that will appear in the <code class="language-plaintext highlighter-rouge">--help</code> flag. And then it pulls the render function from <code class="language-plaintext highlighter-rouge">ink</code> to display the exported <code class="language-plaintext highlighter-rouge">App</code> component from <code class="language-plaintext highlighter-rouge">ui.tsx</code>. <code class="language-plaintext highlighter-rouge">name</code> is a command-line argument which can be set by the user like this:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pokecli <span class="nt">--name</span><span class="o">=</span>Charmander
</code></pre></div></div> <p>We can see that this arg has an explicit type of <code class="language-plaintext highlighter-rouge">string</code>. Since, we now have a basic understanding of how Ink works, let’s get on to creating our CLI!</p> <h1 id="running-the-cli-">Running the CLI 🏃</h1> <p>We can run this code by first compiling our source code into an executable</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm run build
</code></pre></div></div> <p>And then running the executable:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pokecli <span class="nt">--name</span><span class="o">=</span>Charmander
</code></pre></div></div> <p>And we’ll be able to see our output!</p> <p><img src="https://i.imgur.com/ZjXGj8G.png" alt="https://i.imgur.com/ZjXGj8G.png"/></p> <p>You can also run pokecli with the <code class="language-plaintext highlighter-rouge">--help</code> flag to see the output of what’s passed to the <code class="language-plaintext highlighter-rouge">meow</code> function in <code class="language-plaintext highlighter-rouge">cli.tsx</code></p> <h1 id="building-our-cli-️">Building our CLI 🛠️</h1> <p>Let’s first make a simple function to fetch the data of a pokemon through it’s name, in <code class="language-plaintext highlighter-rouge">ui.tsx</code>.</p> <p>We will do this using a library called <a href="https://axios-http.com/">axios</a>.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm i axios
</code></pre></div></div> <p>We can then use this function to send a request to PokeAPI.</p> <div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// fetch pokemon data with its name using pokeapi</span>
<span class="kd">const</span> <span class="nx">pokemon</span> <span class="o">=</span> <span class="p">(</span><span class="nx">name</span><span class="p">:</span> <span class="kr">string</span><span class="p">):</span> <span class="k">void</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">axios</span>
    <span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="s2">`https://pokeapi.co/api/v2/pokemon/</span><span class="p">${</span><span class="nx">name</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">()}</span><span class="s2">`</span><span class="p">)</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">((</span><span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">res</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span>
    <span class="p">});</span>
<span class="p">};</span>
</code></pre></div></div> <p>And if you test this out, we’ll be able to see the data associated with what is passed in the CLI name flag.</p> <p>The problem with this is that, TypeScript doesn’t know the properties that exist in this data object. So let’s declare interfaces for the API response.</p> <div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">interface</span> <span class="nx">Type</span> <span class="p">{</span>
  <span class="nl">slot</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
  <span class="nl">type</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="p">};</span>
<span class="p">}</span>
<span class="kr">interface</span> <span class="nx">Stat</span> <span class="p">{</span>
  <span class="nl">base_stat</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
  <span class="nl">effort</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
  <span class="nl">stat</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="p">};</span>
<span class="p">}</span>
<span class="kr">interface</span> <span class="nx">PokemonData</span> <span class="p">{</span>
  <span class="nl">name</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">height</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
  <span class="nl">weight</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
  <span class="nl">types</span><span class="p">:</span> <span class="nx">Type</span><span class="p">[];</span>
  <span class="nl">stats</span><span class="p">:</span> <span class="nx">Stat</span><span class="p">[];</span>
<span class="p">}</span>
</code></pre></div></div> <p>Ref:</p> <p><img src="https://i.imgur.com/V8GI4cC.png" alt="https://i.imgur.com/V8GI4cC.png"/></p> <p>Let’s also create a state variable to store our pokemon data:</p> <div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="p">[</span><span class="nx">pokemonData</span><span class="p">,</span> <span class="nx">setPokemonData</span><span class="p">]</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">useState</span><span class="o">&lt;</span><span class="nx">PokemonData</span> <span class="o">|</span> <span class="kc">null</span><span class="o">&gt;</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>
</code></pre></div></div> <p>Now, we can update our function to fetch the pokemon data accordingly:</p> <div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// fetch pokemon data with its name using pokeapi</span>
<span class="kd">const</span> <span class="nx">pokemon</span> <span class="o">=</span> <span class="p">(</span><span class="nx">name</span><span class="p">:</span> <span class="kr">string</span><span class="p">):</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">PokemonData</span><span class="o">&gt;</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">url</span> <span class="o">=</span> <span class="s2">`https://pokeapi.co/api/v2/pokemon/</span><span class="p">${</span><span class="nx">name</span><span class="p">}</span><span class="s2">`</span><span class="p">;</span>
  <span class="k">return</span> <span class="nx">axios</span>
    <span class="p">.</span><span class="kd">get</span><span class="p">&lt;</span><span class="nc">PokemonData</span><span class="p">&gt;</span>(url)
    .then((response: AxiosResponse<span class="p">&lt;</span><span class="nc">PokemonData</span><span class="p">&gt;</span>) =&gt; <span class="si">{</span>
      <span class="k">return</span> <span class="nx">response</span><span class="p">.</span><span class="nx">data</span><span class="p">;</span>
    <span class="si">}</span>);
};
</code></pre></div></div> <p>Cool!</p> <p>Now let’s call this function in a <code class="language-plaintext highlighter-rouge">useEffect</code> hook:</p> <div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// call useEffect and use store the pokemon data in state</span>
<span class="nx">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">pokemon</span><span class="p">(</span><span class="nx">name</span><span class="p">).</span><span class="nx">then</span><span class="p">((</span><span class="na">data</span><span class="p">:</span> <span class="nx">PokemonData</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">setPokemonData</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
  <span class="p">});</span>
<span class="p">},</span> <span class="p">[</span><span class="nx">name</span><span class="p">]);</span>
</code></pre></div></div> <p>Awesome!</p> <p>Now all we have to do, is just render the data. Since our state will be <code class="language-plaintext highlighter-rouge">null</code> if the pokemon data is not yet set, we can use that as a loading indicator.</p> <div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">return</span> <span class="p">(</span>
  <span class="p">(</span><span class="nx">pokemonData</span> <span class="o">&amp;&amp;</span>
    <span class="p">{</span>
      <span class="cm">/* pokemon stuff */</span>
    <span class="p">})</span> <span class="o">||</span> <span class="p">&lt;</span><span class="nc">Text</span><span class="p">&gt;</span>Loading...<span class="p">&lt;/</span><span class="nc">Text</span><span class="p">&gt;</span>
<span class="p">);</span>
</code></pre></div></div> <p>And then we can display the pokemon data:</p> <div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">return</span> <span class="p">(</span>
  <span class="p">(</span><span class="nx">pokemonData</span> <span class="o">&amp;&amp;</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">Box</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nc">Text</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nc">Text</span> <span class="na">bold</span> <span class="na">color</span><span class="p">=</span><span class="s">"blue"</span><span class="p">&gt;</span>
          <span class="si">{</span><span class="nx">pokemonData</span><span class="p">?.</span><span class="nx">name</span><span class="p">[</span><span class="mi">0</span><span class="p">]?.</span><span class="nx">toUpperCase</span><span class="p">()</span> <span class="o">+</span> <span class="nx">pokemonData</span><span class="o">!</span><span class="p">.</span><span class="nx">name</span><span class="p">?.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="si">}</span>
        <span class="p">&lt;/</span><span class="nc">Text</span><span class="p">&gt;</span>
        <span class="si">{</span><span class="dl">"</span><span class="se">\n</span><span class="dl">"</span><span class="si">}</span>
        <span class="si">{</span><span class="cm">/* Display a divider */</span><span class="si">}</span>
        <span class="p">&lt;</span><span class="nc">Text</span> <span class="na">color</span><span class="p">=</span><span class="s">"magentaBright"</span><span class="p">&gt;</span>
          <span class="si">{</span><span class="nb">Array</span><span class="p">(</span><span class="nx">pokemonData</span><span class="p">?.</span><span class="nx">name</span><span class="p">.</span><span class="nx">length</span> <span class="o">+</span> <span class="mi">1</span><span class="p">).</span><span class="nx">join</span><span class="p">(</span><span class="dl">"</span><span class="s2">-</span><span class="dl">"</span><span class="p">)</span><span class="si">}</span>
        <span class="p">&lt;/</span><span class="nc">Text</span><span class="p">&gt;</span>
        <span class="si">{</span><span class="dl">"</span><span class="se">\n</span><span class="dl">"</span><span class="si">}</span>
        <span class="p">&lt;</span><span class="nc">Text</span> <span class="na">color</span><span class="p">=</span><span class="s">"yellowBright"</span><span class="p">&gt;</span>Metrics:<span class="p">&lt;/</span><span class="nc">Text</span><span class="p">&gt;</span> <span class="p">&lt;</span><span class="nc">Text</span>
          <span class="na">color</span><span class="p">=</span><span class="s">"greenBright"</span>
          <span class="na">bold</span>
        <span class="p">&gt;</span>
          <span class="si">{</span><span class="cm">/* Height is in decimeters */</span><span class="si">}</span>
          <span class="si">{</span><span class="nx">pokemonData</span><span class="o">!</span><span class="p">.</span><span class="nx">height</span> <span class="o">/</span> <span class="mi">10</span><span class="si">}</span>m, <span class="si">{</span><span class="nx">pokemonData</span><span class="o">!</span><span class="p">.</span><span class="nx">weight</span> <span class="o">/</span> <span class="mi">10</span><span class="si">}</span>kg
        <span class="p">&lt;/</span><span class="nc">Text</span><span class="p">&gt;</span>
        <span class="si">{</span><span class="dl">"</span><span class="se">\n</span><span class="dl">"</span><span class="si">}</span>
        <span class="p">&lt;</span><span class="nc">Text</span> <span class="na">color</span><span class="p">=</span><span class="s">"yellowBright"</span><span class="p">&gt;</span>Type:<span class="p">&lt;/</span><span class="nc">Text</span><span class="p">&gt;</span> <span class="p">&lt;</span><span class="nc">Text</span> <span class="na">color</span><span class="p">=</span><span class="s">"greenBright"</span> <span class="na">bold</span><span class="p">&gt;</span>
          <span class="si">{</span><span class="cm">/* Display the pokemon's types */</span><span class="si">}</span>
          <span class="si">{</span><span class="nx">pokemonData</span><span class="p">?.</span><span class="nx">types</span><span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="kd">type</span><span class="p">:</span> <span class="nx">Type</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="kd">type</span><span class="p">.</span><span class="kd">type</span><span class="p">.</span><span class="nx">name</span><span class="p">).</span><span class="nx">join</span><span class="p">(</span><span class="dl">"</span><span class="s2">, </span><span class="dl">"</span><span class="p">)</span><span class="si">}</span>
        <span class="p">&lt;/</span><span class="nc">Text</span><span class="p">&gt;</span>
        <span class="si">{</span><span class="dl">"</span><span class="se">\n\n</span><span class="dl">"</span><span class="si">}</span>
        <span class="si">{</span><span class="cm">/* Display the pokemon's stats */</span><span class="si">}</span>
        <span class="p">&lt;</span><span class="nc">Text</span> <span class="na">color</span><span class="p">=</span><span class="s">"yellowBright"</span> <span class="na">bold</span><span class="p">&gt;</span>
          Stats<span class="si">{</span><span class="dl">"</span><span class="se">\n</span><span class="dl">"</span><span class="si">}</span>
        <span class="p">&lt;/</span><span class="nc">Text</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nc">Text</span> <span class="na">color</span><span class="p">=</span><span class="s">"greenBright"</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">pokemonData</span><span class="p">?.</span><span class="nx">stats</span><span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="nx">stat</span><span class="p">:</span> <span class="nx">Stat</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="s2">`</span><span class="p">${</span><span class="nx">stat</span><span class="p">.</span><span class="nx">stat</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="s2">: </span><span class="p">${</span><span class="nx">stat</span><span class="p">.</span><span class="nx">base_stat</span><span class="p">}</span><span class="s2">`</span><span class="p">).</span><span class="nx">join</span><span class="p">(</span><span class="dl">"</span><span class="se">\n</span><span class="dl">"</span><span class="p">)</span><span class="si">}</span><span class="p">&lt;/</span><span class="nc">Text</span><span class="p">&gt;</span>
      <span class="p">&lt;/</span><span class="nc">Text</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nc">Box</span><span class="p">&gt;</span>
  <span class="p">))</span> <span class="o">||</span> <span class="p">&lt;</span><span class="nc">Text</span><span class="p">&gt;</span>Loading...<span class="p">&lt;/</span><span class="nc">Text</span><span class="p">&gt;</span>
<span class="p">);</span>
</code></pre></div></div> <p>Now you should be able to see this:</p> <p><img src="https://i.imgur.com/gSHipFy.gif" alt="https://i.imgur.com/gSHipFy.gif"/></p> <p>We can clear the terminal screen before the data is shown. There is an NPM library called <a href="https://www.npmjs.com/package/clear"><code class="language-plaintext highlighter-rouge">clear</code></a> which we can use to achieve this.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm i clear
</code></pre></div></div> <p>Since it is written in JS, we’ll need the type definitions for it too.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm i <span class="nt">-D</span> @types/clear
</code></pre></div></div> <p>Now, we can call the <code class="language-plaintext highlighter-rouge">clear</code> function above our JSX.</p> <div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	<span class="nx">clear</span><span class="p">();</span>
	<span class="k">return</span> <span class="p">(</span>
		<span class="p">(</span><span class="nx">pokemonData</span> <span class="o">&amp;&amp;</span> <span class="p">(</span>
			<span class="p">&lt;</span><span class="nc">Box</span><span class="p">&gt;</span>
				<span class="p">&lt;</span><span class="nc">Text</span><span class="p">&gt;</span>
					<span class="p">&lt;</span><span class="nc">Text</span> <span class="na">bold</span> <span class="na">color</span><span class="p">=</span><span class="s">"blue"</span><span class="p">&gt;</span>
          ...
</code></pre></div></div> <p>Cool!</p> <p>You can also change the help text:</p> <p><code class="language-plaintext highlighter-rouge">cli.tsx</code></p> <div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">cli</span> <span class="o">=</span> <span class="nx">meow</span><span class="p">(</span>
  <span class="s2">`
	Usage
	  $ pokecli
	Options
		--name The name of the pokemon 
	Examples
	  $ pokecli --name=charmander
		Charmander
		----------
		Metrics: 0.6m, 8.5 kg
		Type: fire
		Stats
		hp: 39
		attack: 52
		defense: 43
		special-attack: 60
		special-defense: 50
		speed: 65
`</span><span class="p">,</span>
  <span class="p">{</span>
    <span class="na">flags</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">name</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">type</span><span class="p">:</span> <span class="dl">"</span><span class="s2">string</span><span class="dl">"</span><span class="p">,</span>
      <span class="p">},</span>
    <span class="p">},</span>
  <span class="p">}</span>
<span class="p">);</span>
</code></pre></div></div> <h1 id="-final-output">📤 Final Output</h1> <p>After following with me, you should be able to see this!</p> <p><img src="https://i.imgur.com/5GiKwBQ.gif" alt="https://i.imgur.com/5GiKwBQ.gif"/></p> <p>You can find the source code for the repo <a href="https://github.com/carrotfarmer/pokecli">here</a>.</p> <p>Isn’t it cool how all the hooks and other React features work in a CLI? React sure is taking over the world 😉</p> <p>I’ll see you in the next post! 👋</p>]]></content><author><name>Dhruva Srinivas</name></author><category term="coding"/><category term="react"/><category term="tools"/><summary type="html"><![CDATA[Learn how to build CLI apps with React using React Ink 🧑‍💻]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://cdn.hashnode.com/res/hashnode/image/upload/v1646482447361/58i2tPOdE.png"/><media:content medium="image" url="https://cdn.hashnode.com/res/hashnode/image/upload/v1646482447361/58i2tPOdE.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">Basics of E2E Testing &amp;amp; Quickstart Cypress with Next.js</title><link href="https://genicsblog.com/anurag/basics-of-e2e-testing-and-integrating-cypress-with-next-js" rel="alternate" type="text/html" title="Basics of E2E Testing &amp;amp; Quickstart Cypress with Next.js"/><published>2022-03-01T00:00:00+00:00</published><updated>2022-03-01T00:00:00+00:00</updated><id>https://genicsblog.com/anurag/e2e-testing-cypress-nextjs</id><content type="html" xml:base="https://genicsblog.com/anurag/basics-of-e2e-testing-and-integrating-cypress-with-next-js"><![CDATA[<h2 id="basics-of-e2e-testing-and-integrating-cypress-with-nextjs">Basics of E2E Testing and Integrating Cypress with Next.js</h2> <p>👋 Hello fellas! It’s been a while since I posted an article.</p> <p><img src="https://media.giphy.com/media/3ornk57KwDXf81rjWM/giphy.gif" alt="hello"/></p> <p>As developers, we always want to deliver the best products to users. And Testing is a crucial part of this process. One of the commonly used testing techniques is E2E testing.</p> <h2 id="-e2e-testing---the-basics">💡 E2E Testing - The Basics</h2> <p>End to End Testing (or E2E testing in short) is a technique that tests the entire software product from beginning to end to ensure the application flow behaves as expected.</p> <p>The main intent of E2E testing is to simulate the real user scenario and to test from the end user’s experience.</p> <h4 id="-benefits-of-e2e-testing">📃 Benefits of E2E Testing</h4> <ul> <li>Reduced Risks</li> <li>Increased Confidence</li> <li>Reduced Cost</li> </ul> <h3 id="-e2e-testing-methods">⚡ E2E testing methods</h3> <h4 id="horizontal-e2e-testing">Horizontal E2E testing</h4> <p>Horizontal Testing is done from the end user’s perspective. It evaluates whether the user can navigate the software and use its functions properly. It also helps to detect the bugs that might prevent the user from using some software functions.</p> <h4 id="vertical-e2e-testing">Vertical E2E Testing</h4> <p>This method refers to testing in layers, meaning that tests happen in sequential, hierarchical order. Each subcomponent of the system is tested from start to finish to ensure quality.</p> <p>It is mostly done when the system has no UI or the UI has a high level of technicality and is used to test critical components.</p> <h3 id="-how-to-perform-e2e-testing">❓ How to perform E2E Testing?</h3> <ul> <li>Analyze all the requirements. Have a clear idea about what the app is supposed to do.</li> <li>Set up a test environment as per the requirements.</li> <li>List down all the testing methods required to test these responses.</li> <li>Design the test cases.</li> <li>Run the tests and jot the results.</li> </ul> <h3 id="-e2e-testing-frameworks">⚡ E2E Testing Frameworks</h3> <p>E2E Testing frameworks are used to ensure that all the moving parts in an application is configured properly.</p> <p>Here are some of the most popular ones:</p> <ul> <li>Selenium</li> <li>Cypress</li> <li>Cucumber</li> <li>Testim</li> </ul> <p>Now that you are familiar with the basic concept of E2E Testing, let’s take a look at how to integrate E2E Testing using Cypress in Next.JS</p> <h2 id="-integration-of-cypress-with-nextjs-for-e2e-testing">👨‍💻 Integration of Cypress with Next.js for E2E Testing</h2> <blockquote> <p>Now that you’re familiar with the Basics of E2E Testing, let’s take a look at how to get started with Cypress in Next.js</p> </blockquote> <h4 id="nextjs">Next.JS</h4> <p>In case you are not familiar with Next.js, it’s a react framework packed with some extra features to help both developers and clients.</p> <h4 id="cypress">Cypress</h4> <p>Cypress is a test runner for E2E Testing for the web.</p> <h4 id="setting-up-the-project">Setting up the Project</h4> <p>You can use <code class="language-plaintext highlighter-rouge">create next-app</code> with the <code class="language-plaintext highlighter-rouge">cypress</code> example to get started quickly.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npx create-next-app@latest <span class="nt">--example</span> with-cypress with-cypress-app 
</code></pre></div></div> <p>For existing projects, you can start off by installing the <code class="language-plaintext highlighter-rouge">cypress</code> package.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm <span class="nb">install</span> <span class="nt">--save-dev</span> cypress
</code></pre></div></div> <p>Then, add Cypress to the <code class="language-plaintext highlighter-rouge">scripts</code> section in the <code class="language-plaintext highlighter-rouge">package.json</code> file.</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">"scripts"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="nl">"dev"</span><span class="p">:</span><span class="w"> </span><span class="s2">"next dev"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"build"</span><span class="p">:</span><span class="w"> </span><span class="s2">"next build"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"start"</span><span class="p">:</span><span class="w"> </span><span class="s2">"next start"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"cypress"</span><span class="p">:</span><span class="w"> </span><span class="s2">"cypress open"</span><span class="p">,</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>Next, run cypress to generate examples that use their recommended folder structure.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm run cypress
</code></pre></div></div> <h4 id="creating-your-first-cypress-integration-test">Creating your first Cypress integration test</h4> <p>Let’s say you have two pages</p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// pages/index.js</span>

<span class="k">import</span> <span class="nx">Link</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">next/link</span><span class="dl">'</span>

<span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nx">Home</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nt">nav</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nc">Link</span> <span class="na">href</span><span class="p">=</span><span class="s">"/about"</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">a</span><span class="p">&gt;</span>About<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>
      <span class="p">&lt;/</span><span class="nc">Link</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">nav</span><span class="p">&gt;</span>
  <span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// pages/about.js</span>
<span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nx">About</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>About Page<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div> <p>Then, to test that your navigation is working correctly:</p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// cypress/integration/app.spec.js</span>

<span class="nx">describe</span><span class="p">(</span><span class="dl">'</span><span class="s1">Navigation</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">it</span><span class="p">(</span><span class="dl">'</span><span class="s1">should navigate to the about page</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="c1">// Start from the index page</span>
    <span class="nx">cy</span><span class="p">.</span><span class="nx">visit</span><span class="p">(</span><span class="dl">'</span><span class="s1">http://localhost:3000/</span><span class="dl">'</span><span class="p">)</span>

    <span class="c1">// Find a link with an href attribute containing "about" and click it</span>
    <span class="nx">cy</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">a[href*="about"]</span><span class="dl">'</span><span class="p">).</span><span class="nx">click</span><span class="p">()</span>

    <span class="c1">// The new url should include "/about"</span>
    <span class="nx">cy</span><span class="p">.</span><span class="nx">url</span><span class="p">().</span><span class="nx">should</span><span class="p">(</span><span class="dl">'</span><span class="s1">include</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">/about</span><span class="dl">'</span><span class="p">)</span>

    <span class="c1">// The new page should contain an h1 with "About page"</span>
    <span class="nx">cy</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">h1</span><span class="dl">'</span><span class="p">).</span><span class="nx">contains</span><span class="p">(</span><span class="dl">'</span><span class="s1">About Page</span><span class="dl">'</span><span class="p">)</span>
  <span class="p">})</span>
<span class="p">})</span>
</code></pre></div></div> <p><strong>Tip</strong>: Instead of using <code class="language-plaintext highlighter-rouge">cy.visit('http://localhost:3000/')</code>, you can just use <code class="language-plaintext highlighter-rouge">cy.visit('/')</code> if you set the <code class="language-plaintext highlighter-rouge">baseUrl</code> to <code class="language-plaintext highlighter-rouge">http://localhost:3000</code> in the <code class="language-plaintext highlighter-rouge">cypress.json</code> config file.</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">//</span><span class="w"> </span><span class="err">cypress.json</span><span class="w"> 
</span><span class="p">{</span><span class="w">
  </span><span class="nl">"baseUrl"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http://localhost:3000"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>At this point, you will have a simple test setup. Since Cypress is testing a real Next.js application, it requires the Next.js server to be running prior to starting cypress.</p> <p>First Run <code class="language-plaintext highlighter-rouge">npm run build</code> and <code class="language-plaintext highlighter-rouge">npm run start</code>, then run <code class="language-plaintext highlighter-rouge">npm run cypress</code> in another terminal window to start Cypress.</p> <p>Now, cypress will start and you can view the results.</p> <h3 id="further-steps-for-continuous-integration-ci">Further steps for Continuous Integration (CI)</h3> <p>At this point, you will have noticed that running Cypress so far has opened an interactive browser which is not ideal for CI environments.</p> <p>You can run Cypress headlessly using the <code class="language-plaintext highlighter-rouge">cypress run</code> command.</p> <p>In the <code class="language-plaintext highlighter-rouge">package.json</code> file:</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">//</span><span class="w"> </span><span class="err">package.json</span><span class="w">

</span><span class="nl">"scripts"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="err">//</span><span class="w"> </span><span class="err">...</span><span class="w">
  </span><span class="nl">"cypress"</span><span class="p">:</span><span class="w"> </span><span class="s2">"cypress open"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"cypress:headless"</span><span class="p">:</span><span class="w"> </span><span class="s2">"cypress run"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>That’s it for this article! You can show your support by dropping some comments here!</p> <p><strong>About the Author</strong></p> <ul> <li><a href="https://anurag.tech">Portfolio</a></li> <li><a href="https://blog.anurag.tech">Blog</a></li> </ul>]]></content><author><name>anuragkr</name></author><category term="web"/><category term="next-js"/><category term="testing"/><summary type="html"><![CDATA[Learn the basics of E2E Testing using Cypress in your Next.js app from this start guide!]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://user-images.githubusercontent.com/46792249/156170962-605f6ce9-2924-411b-8d39-888c351d0ada.png"/><media:content medium="image" url="https://user-images.githubusercontent.com/46792249/156170962-605f6ce9-2924-411b-8d39-888c351d0ada.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry></feed>